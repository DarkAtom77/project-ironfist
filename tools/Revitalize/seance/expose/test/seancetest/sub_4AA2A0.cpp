int __thiscall sub_4AA2A0(void *this)
{
  int result; // eax@2
  unsigned int v2; // eax@7
  unsigned int v3; // eax@7
  unsigned int v4; // eax@7
  unsigned int v5; // eax@7
  unsigned int v6; // eax@7
  unsigned int v7; // eax@7
  unsigned int v8; // eax@7
  unsigned int v9; // eax@9
  unsigned int v10; // eax@10
  unsigned int v11; // eax@11
  unsigned int v12; // eax@12
  void *v13; // [sp+Ch] [bp-7Ch]@1
  int v14; // [sp+10h] [bp-78h]@5
  unsigned __int32 startmsec; // [sp+14h] [bp-74h]@9
  char v16; // [sp+18h] [bp-70h]@7
  unsigned __int32 tracknum; // [sp+7Ch] [bp-Ch]@7
  unsigned __int32 v18; // [sp+80h] [bp-8h]@3
  unsigned __int32 endmsec; // [sp+84h] [bp-4h]@9

  v13 = this;
  if ( dword_51D4A8 )
  {
    v18 = AIL_redbook_tracks(dword_51D4A8);
    if ( v18 )
    {
      v14 = _open((const char *)v13, 17153);
      if ( v14 )
      {
        sprintf(&v16, "// FILE : %s\n", v13);
        v2 = strlen(&v16);
        _write(v14, &v16, v2);
        sprintf(&v16, "// DO NOT EDIT.\n");
        v3 = strlen(&v16);
        _write(v14, &v16, v3);
        sprintf(&v16, "// THIS FILE WAS AUTOMATICALLY GENERATED BY CDTest_GenerateTable.\n");
        v4 = strlen(&v16);
        _write(v14, &v16, v4);
        sprintf(&v16, "\n\n\n");
        v5 = strlen(&v16);
        _write(v14, &v16, v5);
        sprintf(&v16, "#define CDTEST_NUMTRACKS %d\n\n\n", v18);
        v6 = strlen(&v16);
        _write(v14, &v16, v6);
        sprintf(&v16, "sCDTest_Track_Data cdTestTrackData[CDTEST_NUMTRACKS] =\n");
        v7 = strlen(&v16);
        _write(v14, &v16, v7);
        sprintf(&v16, "{\n");
        v8 = strlen(&v16);
        _write(v14, &v16, v8);
        for ( tracknum = 1; (signed int)tracknum <= (signed int)v18; ++tracknum )
        {
          AIL_redbook_track_info(dword_51D4A8, tracknum, &startmsec, &endmsec);
          sprintf(&v16, "  {%d, %d}", startmsec, endmsec);
          v9 = strlen(&v16);
          _write(v14, &v16, v9);
          if ( tracknum != v18 )
          {
            sprintf(&v16, L",");
            v10 = strlen(&v16);
            _write(v14, &v16, v10);
          }
          sprintf(&v16, L"\n");
          v11 = strlen(&v16);
          _write(v14, &v16, v11);
        }
        sprintf(&v16, "};\n");
        v12 = strlen(&v16);
        _write(v14, &v16, v12);
        _close(v14);
        result = sub_4AA569();
      }
      else
      {
        result = sub_4AA569();
      }
    }
    else
    {
      result = sub_4AA569();
    }
  }
  else
  {
    result = sub_4AA569();
  }
  return result;
}
