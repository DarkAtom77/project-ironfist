// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "map_xml.hxx"

namespace ironfist_map
{
  // slot_t
  // 

  const slot_t::id_optional& slot_t::
  id () const
  {
    return this->id_;
  }

  slot_t::id_optional& slot_t::
  id ()
  {
    return this->id_;
  }

  void slot_t::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void slot_t::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  const slot_t::quantity_optional& slot_t::
  quantity () const
  {
    return this->quantity_;
  }

  slot_t::quantity_optional& slot_t::
  quantity ()
  {
    return this->quantity_;
  }

  void slot_t::
  quantity (const quantity_type& x)
  {
    this->quantity_.set (x);
  }

  void slot_t::
  quantity (const quantity_optional& x)
  {
    this->quantity_ = x;
  }


  // army_t
  // 

  const army_t::slot_sequence& army_t::
  slot () const
  {
    return this->slot_;
  }

  army_t::slot_sequence& army_t::
  slot ()
  {
    return this->slot_;
  }

  void army_t::
  slot (const slot_sequence& s)
  {
    this->slot_ = s;
  }


  // hero_t
  // 

  const hero_t::spellpoints_type& hero_t::
  spellpoints () const
  {
    return this->spellpoints_.get ();
  }

  hero_t::spellpoints_type& hero_t::
  spellpoints ()
  {
    return this->spellpoints_.get ();
  }

  void hero_t::
  spellpoints (const spellpoints_type& x)
  {
    this->spellpoints_.set (x);
  }

  const hero_t::idx_type& hero_t::
  idx () const
  {
    return this->idx_.get ();
  }

  hero_t::idx_type& hero_t::
  idx ()
  {
    return this->idx_.get ();
  }

  void hero_t::
  idx (const idx_type& x)
  {
    this->idx_.set (x);
  }

  const hero_t::ownerIdx_type& hero_t::
  ownerIdx () const
  {
    return this->ownerIdx_.get ();
  }

  hero_t::ownerIdx_type& hero_t::
  ownerIdx ()
  {
    return this->ownerIdx_.get ();
  }

  void hero_t::
  ownerIdx (const ownerIdx_type& x)
  {
    this->ownerIdx_.set (x);
  }

  const hero_t::field_4_type& hero_t::
  field_4 () const
  {
    return this->field_4_.get ();
  }

  hero_t::field_4_type& hero_t::
  field_4 ()
  {
    return this->field_4_.get ();
  }

  void hero_t::
  field_4 (const field_4_type& x)
  {
    this->field_4_.set (x);
  }

  const hero_t::field_5_type& hero_t::
  field_5 () const
  {
    return this->field_5_.get ();
  }

  hero_t::field_5_type& hero_t::
  field_5 ()
  {
    return this->field_5_.get ();
  }

  void hero_t::
  field_5 (const field_5_type& x)
  {
    this->field_5_.set (x);
  }

  const hero_t::field_6_type& hero_t::
  field_6 () const
  {
    return this->field_6_.get ();
  }

  hero_t::field_6_type& hero_t::
  field_6 ()
  {
    return this->field_6_.get ();
  }

  void hero_t::
  field_6 (const field_6_type& x)
  {
    this->field_6_.set (x);
  }

  const hero_t::field_7_type& hero_t::
  field_7 () const
  {
    return this->field_7_.get ();
  }

  hero_t::field_7_type& hero_t::
  field_7 ()
  {
    return this->field_7_.get ();
  }

  void hero_t::
  field_7 (const field_7_type& x)
  {
    this->field_7_.set (x);
  }

  const hero_t::field_8_type& hero_t::
  field_8 () const
  {
    return this->field_8_.get ();
  }

  hero_t::field_8_type& hero_t::
  field_8 ()
  {
    return this->field_8_.get ();
  }

  void hero_t::
  field_8 (const field_8_type& x)
  {
    this->field_8_.set (x);
  }

  const hero_t::field_9_type& hero_t::
  field_9 () const
  {
    return this->field_9_.get ();
  }

  hero_t::field_9_type& hero_t::
  field_9 ()
  {
    return this->field_9_.get ();
  }

  void hero_t::
  field_9 (const field_9_type& x)
  {
    this->field_9_.set (x);
  }

  const hero_t::name_type& hero_t::
  name () const
  {
    return this->name_.get ();
  }

  hero_t::name_type& hero_t::
  name ()
  {
    return this->name_.get ();
  }

  void hero_t::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void hero_t::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const hero_t::factionID_type& hero_t::
  factionID () const
  {
    return this->factionID_.get ();
  }

  hero_t::factionID_type& hero_t::
  factionID ()
  {
    return this->factionID_.get ();
  }

  void hero_t::
  factionID (const factionID_type& x)
  {
    this->factionID_.set (x);
  }

  const hero_t::heroID_type& hero_t::
  heroID () const
  {
    return this->heroID_.get ();
  }

  hero_t::heroID_type& hero_t::
  heroID ()
  {
    return this->heroID_.get ();
  }

  void hero_t::
  heroID (const heroID_type& x)
  {
    this->heroID_.set (x);
  }

  const hero_t::x_type& hero_t::
  x () const
  {
    return this->x_.get ();
  }

  hero_t::x_type& hero_t::
  x ()
  {
    return this->x_.get ();
  }

  void hero_t::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const hero_t::y_type& hero_t::
  y () const
  {
    return this->y_.get ();
  }

  hero_t::y_type& hero_t::
  y ()
  {
    return this->y_.get ();
  }

  void hero_t::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  const hero_t::field_21_type& hero_t::
  field_21 () const
  {
    return this->field_21_.get ();
  }

  hero_t::field_21_type& hero_t::
  field_21 ()
  {
    return this->field_21_.get ();
  }

  void hero_t::
  field_21 (const field_21_type& x)
  {
    this->field_21_.set (x);
  }

  const hero_t::field_23_type& hero_t::
  field_23 () const
  {
    return this->field_23_.get ();
  }

  hero_t::field_23_type& hero_t::
  field_23 ()
  {
    return this->field_23_.get ();
  }

  void hero_t::
  field_23 (const field_23_type& x)
  {
    this->field_23_.set (x);
  }

  const hero_t::field_25_type& hero_t::
  field_25 () const
  {
    return this->field_25_.get ();
  }

  hero_t::field_25_type& hero_t::
  field_25 ()
  {
    return this->field_25_.get ();
  }

  void hero_t::
  field_25 (const field_25_type& x)
  {
    this->field_25_.set (x);
  }

  const hero_t::field_27_type& hero_t::
  field_27 () const
  {
    return this->field_27_.get ();
  }

  hero_t::field_27_type& hero_t::
  field_27 ()
  {
    return this->field_27_.get ();
  }

  void hero_t::
  field_27 (const field_27_type& x)
  {
    this->field_27_.set (x);
  }

  const hero_t::field_29_type& hero_t::
  field_29 () const
  {
    return this->field_29_.get ();
  }

  hero_t::field_29_type& hero_t::
  field_29 ()
  {
    return this->field_29_.get ();
  }

  void hero_t::
  field_29 (const field_29_type& x)
  {
    this->field_29_.set (x);
  }

  const hero_t::field_2B_type& hero_t::
  field_2B () const
  {
    return this->field_2B_.get ();
  }

  hero_t::field_2B_type& hero_t::
  field_2B ()
  {
    return this->field_2B_.get ();
  }

  void hero_t::
  field_2B (const field_2B_type& x)
  {
    this->field_2B_.set (x);
  }

  const hero_t::occupiedObjType_type& hero_t::
  occupiedObjType () const
  {
    return this->occupiedObjType_.get ();
  }

  hero_t::occupiedObjType_type& hero_t::
  occupiedObjType ()
  {
    return this->occupiedObjType_.get ();
  }

  void hero_t::
  occupiedObjType (const occupiedObjType_type& x)
  {
    this->occupiedObjType_.set (x);
  }

  const hero_t::occupiedObjVal_type& hero_t::
  occupiedObjVal () const
  {
    return this->occupiedObjVal_.get ();
  }

  hero_t::occupiedObjVal_type& hero_t::
  occupiedObjVal ()
  {
    return this->occupiedObjVal_.get ();
  }

  void hero_t::
  occupiedObjVal (const occupiedObjVal_type& x)
  {
    this->occupiedObjVal_.set (x);
  }

  const hero_t::mobility_type& hero_t::
  mobility () const
  {
    return this->mobility_.get ();
  }

  hero_t::mobility_type& hero_t::
  mobility ()
  {
    return this->mobility_.get ();
  }

  void hero_t::
  mobility (const mobility_type& x)
  {
    this->mobility_.set (x);
  }

  const hero_t::remainingMobility_type& hero_t::
  remainingMobility () const
  {
    return this->remainingMobility_.get ();
  }

  hero_t::remainingMobility_type& hero_t::
  remainingMobility ()
  {
    return this->remainingMobility_.get ();
  }

  void hero_t::
  remainingMobility (const remainingMobility_type& x)
  {
    this->remainingMobility_.set (x);
  }

  const hero_t::experience_type& hero_t::
  experience () const
  {
    return this->experience_.get ();
  }

  hero_t::experience_type& hero_t::
  experience ()
  {
    return this->experience_.get ();
  }

  void hero_t::
  experience (const experience_type& x)
  {
    this->experience_.set (x);
  }

  const hero_t::oldLevel_type& hero_t::
  oldLevel () const
  {
    return this->oldLevel_.get ();
  }

  hero_t::oldLevel_type& hero_t::
  oldLevel ()
  {
    return this->oldLevel_.get ();
  }

  void hero_t::
  oldLevel (const oldLevel_type& x)
  {
    this->oldLevel_.set (x);
  }

  const hero_t::attack_type& hero_t::
  attack () const
  {
    return this->attack_.get ();
  }

  hero_t::attack_type& hero_t::
  attack ()
  {
    return this->attack_.get ();
  }

  void hero_t::
  attack (const attack_type& x)
  {
    this->attack_.set (x);
  }

  const hero_t::defense_type& hero_t::
  defense () const
  {
    return this->defense_.get ();
  }

  hero_t::defense_type& hero_t::
  defense ()
  {
    return this->defense_.get ();
  }

  void hero_t::
  defense (const defense_type& x)
  {
    this->defense_.set (x);
  }

  const hero_t::spellpower_type& hero_t::
  spellpower () const
  {
    return this->spellpower_.get ();
  }

  hero_t::spellpower_type& hero_t::
  spellpower ()
  {
    return this->spellpower_.get ();
  }

  void hero_t::
  spellpower (const spellpower_type& x)
  {
    this->spellpower_.set (x);
  }

  const hero_t::knowledge_type& hero_t::
  knowledge () const
  {
    return this->knowledge_.get ();
  }

  hero_t::knowledge_type& hero_t::
  knowledge ()
  {
    return this->knowledge_.get ();
  }

  void hero_t::
  knowledge (const knowledge_type& x)
  {
    this->knowledge_.set (x);
  }

  const hero_t::field_43_type& hero_t::
  field_43 () const
  {
    return this->field_43_.get ();
  }

  hero_t::field_43_type& hero_t::
  field_43 ()
  {
    return this->field_43_.get ();
  }

  void hero_t::
  field_43 (const field_43_type& x)
  {
    this->field_43_.set (x);
  }

  const hero_t::tempMoraleBonuses_type& hero_t::
  tempMoraleBonuses () const
  {
    return this->tempMoraleBonuses_.get ();
  }

  hero_t::tempMoraleBonuses_type& hero_t::
  tempMoraleBonuses ()
  {
    return this->tempMoraleBonuses_.get ();
  }

  void hero_t::
  tempMoraleBonuses (const tempMoraleBonuses_type& x)
  {
    this->tempMoraleBonuses_.set (x);
  }

  const hero_t::tempLuckBonuses_type& hero_t::
  tempLuckBonuses () const
  {
    return this->tempLuckBonuses_.get ();
  }

  hero_t::tempLuckBonuses_type& hero_t::
  tempLuckBonuses ()
  {
    return this->tempLuckBonuses_.get ();
  }

  void hero_t::
  tempLuckBonuses (const tempLuckBonuses_type& x)
  {
    this->tempLuckBonuses_.set (x);
  }

  const hero_t::field_46_type& hero_t::
  field_46 () const
  {
    return this->field_46_.get ();
  }

  hero_t::field_46_type& hero_t::
  field_46 ()
  {
    return this->field_46_.get ();
  }

  void hero_t::
  field_46 (const field_46_type& x)
  {
    this->field_46_.set (x);
  }

  const hero_t::gazeboesVisited_type& hero_t::
  gazeboesVisited () const
  {
    return this->gazeboesVisited_.get ();
  }

  hero_t::gazeboesVisited_type& hero_t::
  gazeboesVisited ()
  {
    return this->gazeboesVisited_.get ();
  }

  void hero_t::
  gazeboesVisited (const gazeboesVisited_type& x)
  {
    this->gazeboesVisited_.set (x);
  }

  const hero_t::fortsVisited_type& hero_t::
  fortsVisited () const
  {
    return this->fortsVisited_.get ();
  }

  hero_t::fortsVisited_type& hero_t::
  fortsVisited ()
  {
    return this->fortsVisited_.get ();
  }

  void hero_t::
  fortsVisited (const fortsVisited_type& x)
  {
    this->fortsVisited_.set (x);
  }

  const hero_t::witchDoctorHutsVisited_type& hero_t::
  witchDoctorHutsVisited () const
  {
    return this->witchDoctorHutsVisited_.get ();
  }

  hero_t::witchDoctorHutsVisited_type& hero_t::
  witchDoctorHutsVisited ()
  {
    return this->witchDoctorHutsVisited_.get ();
  }

  void hero_t::
  witchDoctorHutsVisited (const witchDoctorHutsVisited_type& x)
  {
    this->witchDoctorHutsVisited_.set (x);
  }

  const hero_t::mercenaryCampsVisited_type& hero_t::
  mercenaryCampsVisited () const
  {
    return this->mercenaryCampsVisited_.get ();
  }

  hero_t::mercenaryCampsVisited_type& hero_t::
  mercenaryCampsVisited ()
  {
    return this->mercenaryCampsVisited_.get ();
  }

  void hero_t::
  mercenaryCampsVisited (const mercenaryCampsVisited_type& x)
  {
    this->mercenaryCampsVisited_.set (x);
  }

  const hero_t::standingStonesVisited_type& hero_t::
  standingStonesVisited () const
  {
    return this->standingStonesVisited_.get ();
  }

  hero_t::standingStonesVisited_type& hero_t::
  standingStonesVisited ()
  {
    return this->standingStonesVisited_.get ();
  }

  void hero_t::
  standingStonesVisited (const standingStonesVisited_type& x)
  {
    this->standingStonesVisited_.set (x);
  }

  const hero_t::treesOfKnowledgeVisited_type& hero_t::
  treesOfKnowledgeVisited () const
  {
    return this->treesOfKnowledgeVisited_.get ();
  }

  hero_t::treesOfKnowledgeVisited_type& hero_t::
  treesOfKnowledgeVisited ()
  {
    return this->treesOfKnowledgeVisited_.get ();
  }

  void hero_t::
  treesOfKnowledgeVisited (const treesOfKnowledgeVisited_type& x)
  {
    this->treesOfKnowledgeVisited_.set (x);
  }

  const hero_t::xanadusVisited_type& hero_t::
  xanadusVisited () const
  {
    return this->xanadusVisited_.get ();
  }

  hero_t::xanadusVisited_type& hero_t::
  xanadusVisited ()
  {
    return this->xanadusVisited_.get ();
  }

  void hero_t::
  xanadusVisited (const xanadusVisited_type& x)
  {
    this->xanadusVisited_.set (x);
  }

  const hero_t::randomSeed_type& hero_t::
  randomSeed () const
  {
    return this->randomSeed_.get ();
  }

  hero_t::randomSeed_type& hero_t::
  randomSeed ()
  {
    return this->randomSeed_.get ();
  }

  void hero_t::
  randomSeed (const randomSeed_type& x)
  {
    this->randomSeed_.set (x);
  }

  const hero_t::wisdomLastOffered_type& hero_t::
  wisdomLastOffered () const
  {
    return this->wisdomLastOffered_.get ();
  }

  hero_t::wisdomLastOffered_type& hero_t::
  wisdomLastOffered ()
  {
    return this->wisdomLastOffered_.get ();
  }

  void hero_t::
  wisdomLastOffered (const wisdomLastOffered_type& x)
  {
    this->wisdomLastOffered_.set (x);
  }

  const hero_t::army_type& hero_t::
  army () const
  {
    return this->army_.get ();
  }

  hero_t::army_type& hero_t::
  army ()
  {
    return this->army_.get ();
  }

  void hero_t::
  army (const army_type& x)
  {
    this->army_.set (x);
  }

  void hero_t::
  army (::std::auto_ptr< army_type > x)
  {
    this->army_.set (x);
  }

  const hero_t::secondarySkill_sequence& hero_t::
  secondarySkill () const
  {
    return this->secondarySkill_;
  }

  hero_t::secondarySkill_sequence& hero_t::
  secondarySkill ()
  {
    return this->secondarySkill_;
  }

  void hero_t::
  secondarySkill (const secondarySkill_sequence& s)
  {
    this->secondarySkill_ = s;
  }

  const hero_t::spell_sequence& hero_t::
  spell () const
  {
    return this->spell_;
  }

  hero_t::spell_sequence& hero_t::
  spell ()
  {
    return this->spell_;
  }

  void hero_t::
  spell (const spell_sequence& s)
  {
    this->spell_ = s;
  }

  const hero_t::artifact_sequence& hero_t::
  artifact () const
  {
    return this->artifact_;
  }

  hero_t::artifact_sequence& hero_t::
  artifact ()
  {
    return this->artifact_;
  }

  void hero_t::
  artifact (const artifact_sequence& s)
  {
    this->artifact_ = s;
  }

  const hero_t::flags_type& hero_t::
  flags () const
  {
    return this->flags_.get ();
  }

  hero_t::flags_type& hero_t::
  flags ()
  {
    return this->flags_.get ();
  }

  void hero_t::
  flags (const flags_type& x)
  {
    this->flags_.set (x);
  }

  const hero_t::isCaptain_type& hero_t::
  isCaptain () const
  {
    return this->isCaptain_.get ();
  }

  hero_t::isCaptain_type& hero_t::
  isCaptain ()
  {
    return this->isCaptain_.get ();
  }

  void hero_t::
  isCaptain (const isCaptain_type& x)
  {
    this->isCaptain_.set (x);
  }

  const hero_t::field_E8_type& hero_t::
  field_E8 () const
  {
    return this->field_E8_.get ();
  }

  hero_t::field_E8_type& hero_t::
  field_E8 ()
  {
    return this->field_E8_.get ();
  }

  void hero_t::
  field_E8 (const field_E8_type& x)
  {
    this->field_E8_.set (x);
  }


  // tableElement_t
  // 

  const tableElement_t::key_optional& tableElement_t::
  key () const
  {
    return this->key_;
  }

  tableElement_t::key_optional& tableElement_t::
  key ()
  {
    return this->key_;
  }

  void tableElement_t::
  key (const key_type& x)
  {
    this->key_.set (x);
  }

  void tableElement_t::
  key (const key_optional& x)
  {
    this->key_ = x;
  }

  void tableElement_t::
  key (::std::auto_ptr< key_type > x)
  {
    this->key_.set (x);
  }

  const tableElement_t::value_optional& tableElement_t::
  value () const
  {
    return this->value_;
  }

  tableElement_t::value_optional& tableElement_t::
  value ()
  {
    return this->value_;
  }

  void tableElement_t::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void tableElement_t::
  value (const value_optional& x)
  {
    this->value_ = x;
  }

  void tableElement_t::
  value (::std::auto_ptr< value_type > x)
  {
    this->value_.set (x);
  }

  const tableElement_t::type_type& tableElement_t::
  type () const
  {
    return this->type_.get ();
  }

  tableElement_t::type_type& tableElement_t::
  type ()
  {
    return this->type_.get ();
  }

  void tableElement_t::
  type (const type_type& x)
  {
    this->type_.set (x);
  }

  void tableElement_t::
  type (::std::auto_ptr< type_type > x)
  {
    this->type_.set (x);
  }

  const tableElement_t::type_type& tableElement_t::
  type_default_value ()
  {
    return type_default_value_;
  }


  // table_t
  // 

  const table_t::tableElement_sequence& table_t::
  tableElement () const
  {
    return this->tableElement_;
  }

  table_t::tableElement_sequence& table_t::
  tableElement ()
  {
    return this->tableElement_;
  }

  void table_t::
  tableElement (const tableElement_sequence& s)
  {
    this->tableElement_ = s;
  }

  const table_t::table_sequence& table_t::
  table () const
  {
    return this->table_;
  }

  table_t::table_sequence& table_t::
  table ()
  {
    return this->table_;
  }

  void table_t::
  table (const table_sequence& s)
  {
    this->table_ = s;
  }

  const table_t::tableId_optional& table_t::
  tableId () const
  {
    return this->tableId_;
  }

  table_t::tableId_optional& table_t::
  tableId ()
  {
    return this->tableId_;
  }

  void table_t::
  tableId (const tableId_type& x)
  {
    this->tableId_.set (x);
  }

  void table_t::
  tableId (const tableId_optional& x)
  {
    this->tableId_ = x;
  }

  void table_t::
  tableId (::std::auto_ptr< tableId_type > x)
  {
    this->tableId_.set (x);
  }


  // mapVariable_t
  // 

  const mapVariable_t::table_optional& mapVariable_t::
  table () const
  {
    return this->table_;
  }

  mapVariable_t::table_optional& mapVariable_t::
  table ()
  {
    return this->table_;
  }

  void mapVariable_t::
  table (const table_type& x)
  {
    this->table_.set (x);
  }

  void mapVariable_t::
  table (const table_optional& x)
  {
    this->table_ = x;
  }

  void mapVariable_t::
  table (::std::auto_ptr< table_type > x)
  {
    this->table_.set (x);
  }

  const mapVariable_t::id_optional& mapVariable_t::
  id () const
  {
    return this->id_;
  }

  mapVariable_t::id_optional& mapVariable_t::
  id ()
  {
    return this->id_;
  }

  void mapVariable_t::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void mapVariable_t::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void mapVariable_t::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const mapVariable_t::value_optional& mapVariable_t::
  value () const
  {
    return this->value_;
  }

  mapVariable_t::value_optional& mapVariable_t::
  value ()
  {
    return this->value_;
  }

  void mapVariable_t::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void mapVariable_t::
  value (const value_optional& x)
  {
    this->value_ = x;
  }

  void mapVariable_t::
  value (::std::auto_ptr< value_type > x)
  {
    this->value_.set (x);
  }

  const mapVariable_t::type_type& mapVariable_t::
  type () const
  {
    return this->type_.get ();
  }

  mapVariable_t::type_type& mapVariable_t::
  type ()
  {
    return this->type_.get ();
  }

  void mapVariable_t::
  type (const type_type& x)
  {
    this->type_.set (x);
  }

  void mapVariable_t::
  type (::std::auto_ptr< type_type > x)
  {
    this->type_.set (x);
  }

  const mapVariable_t::type_type& mapVariable_t::
  type_default_value ()
  {
    return type_default_value_;
  }


  // gamestate_t
  // 

  const gamestate_t::allowAIArmySharing_type& gamestate_t::
  allowAIArmySharing () const
  {
    return this->allowAIArmySharing_.get ();
  }

  gamestate_t::allowAIArmySharing_type& gamestate_t::
  allowAIArmySharing ()
  {
    return this->allowAIArmySharing_.get ();
  }

  void gamestate_t::
  allowAIArmySharing (const allowAIArmySharing_type& x)
  {
    this->allowAIArmySharing_.set (x);
  }

  gamestate_t::allowAIArmySharing_type gamestate_t::
  allowAIArmySharing_default_value ()
  {
    return allowAIArmySharing_type (1);
  }

  const gamestate_t::mapWidth_type& gamestate_t::
  mapWidth () const
  {
    return this->mapWidth_.get ();
  }

  gamestate_t::mapWidth_type& gamestate_t::
  mapWidth ()
  {
    return this->mapWidth_.get ();
  }

  void gamestate_t::
  mapWidth (const mapWidth_type& x)
  {
    this->mapWidth_.set (x);
  }

  gamestate_t::mapWidth_type gamestate_t::
  mapWidth_default_value ()
  {
    return mapWidth_type (32);
  }

  const gamestate_t::mapHeight_type& gamestate_t::
  mapHeight () const
  {
    return this->mapHeight_.get ();
  }

  gamestate_t::mapHeight_type& gamestate_t::
  mapHeight ()
  {
    return this->mapHeight_.get ();
  }

  void gamestate_t::
  mapHeight (const mapHeight_type& x)
  {
    this->mapHeight_.set (x);
  }

  gamestate_t::mapHeight_type gamestate_t::
  mapHeight_default_value ()
  {
    return mapHeight_type (32);
  }

  const gamestate_t::gameInstanceID_type& gamestate_t::
  gameInstanceID () const
  {
    return this->gameInstanceID_.get ();
  }

  gamestate_t::gameInstanceID_type& gamestate_t::
  gameInstanceID ()
  {
    return this->gameInstanceID_.get ();
  }

  void gamestate_t::
  gameInstanceID (const gameInstanceID_type& x)
  {
    this->gameInstanceID_.set (x);
  }

  const gamestate_t::monthType_type& gamestate_t::
  monthType () const
  {
    return this->monthType_.get ();
  }

  gamestate_t::monthType_type& gamestate_t::
  monthType ()
  {
    return this->monthType_.get ();
  }

  void gamestate_t::
  monthType (const monthType_type& x)
  {
    this->monthType_.set (x);
  }

  const gamestate_t::monthTypeExtra_type& gamestate_t::
  monthTypeExtra () const
  {
    return this->monthTypeExtra_.get ();
  }

  gamestate_t::monthTypeExtra_type& gamestate_t::
  monthTypeExtra ()
  {
    return this->monthTypeExtra_.get ();
  }

  void gamestate_t::
  monthTypeExtra (const monthTypeExtra_type& x)
  {
    this->monthTypeExtra_.set (x);
  }

  const gamestate_t::weekType_type& gamestate_t::
  weekType () const
  {
    return this->weekType_.get ();
  }

  gamestate_t::weekType_type& gamestate_t::
  weekType ()
  {
    return this->weekType_.get ();
  }

  void gamestate_t::
  weekType (const weekType_type& x)
  {
    this->weekType_.set (x);
  }

  const gamestate_t::weekTypeExtra_type& gamestate_t::
  weekTypeExtra () const
  {
    return this->weekTypeExtra_.get ();
  }

  gamestate_t::weekTypeExtra_type& gamestate_t::
  weekTypeExtra ()
  {
    return this->weekTypeExtra_.get ();
  }

  void gamestate_t::
  weekTypeExtra (const weekTypeExtra_type& x)
  {
    this->weekTypeExtra_.set (x);
  }

  const gamestate_t::mapChangeCtr_type& gamestate_t::
  mapChangeCtr () const
  {
    return this->mapChangeCtr_.get ();
  }

  gamestate_t::mapChangeCtr_type& gamestate_t::
  mapChangeCtr ()
  {
    return this->mapChangeCtr_.get ();
  }

  void gamestate_t::
  mapChangeCtr (const mapChangeCtr_type& x)
  {
    this->mapChangeCtr_.set (x);
  }

  const gamestate_t::numPlayers_type& gamestate_t::
  numPlayers () const
  {
    return this->numPlayers_.get ();
  }

  gamestate_t::numPlayers_type& gamestate_t::
  numPlayers ()
  {
    return this->numPlayers_.get ();
  }

  void gamestate_t::
  numPlayers (const numPlayers_type& x)
  {
    this->numPlayers_.set (x);
  }

  const gamestate_t::currentPlayer_type& gamestate_t::
  currentPlayer () const
  {
    return this->currentPlayer_.get ();
  }

  gamestate_t::currentPlayer_type& gamestate_t::
  currentPlayer ()
  {
    return this->currentPlayer_.get ();
  }

  void gamestate_t::
  currentPlayer (const currentPlayer_type& x)
  {
    this->currentPlayer_.set (x);
  }

  const gamestate_t::numDefatedPlayers_type& gamestate_t::
  numDefatedPlayers () const
  {
    return this->numDefatedPlayers_.get ();
  }

  gamestate_t::numDefatedPlayers_type& gamestate_t::
  numDefatedPlayers ()
  {
    return this->numDefatedPlayers_.get ();
  }

  void gamestate_t::
  numDefatedPlayers (const numDefatedPlayers_type& x)
  {
    this->numDefatedPlayers_.set (x);
  }

  const gamestate_t::day_type& gamestate_t::
  day () const
  {
    return this->day_.get ();
  }

  gamestate_t::day_type& gamestate_t::
  day ()
  {
    return this->day_.get ();
  }

  void gamestate_t::
  day (const day_type& x)
  {
    this->day_.set (x);
  }

  const gamestate_t::week_type& gamestate_t::
  week () const
  {
    return this->week_.get ();
  }

  gamestate_t::week_type& gamestate_t::
  week ()
  {
    return this->week_.get ();
  }

  void gamestate_t::
  week (const week_type& x)
  {
    this->week_.set (x);
  }

  const gamestate_t::month_type& gamestate_t::
  month () const
  {
    return this->month_.get ();
  }

  gamestate_t::month_type& gamestate_t::
  month ()
  {
    return this->month_.get ();
  }

  void gamestate_t::
  month (const month_type& x)
  {
    this->month_.set (x);
  }

  const gamestate_t::numObelisks_type& gamestate_t::
  numObelisks () const
  {
    return this->numObelisks_.get ();
  }

  gamestate_t::numObelisks_type& gamestate_t::
  numObelisks ()
  {
    return this->numObelisks_.get ();
  }

  void gamestate_t::
  numObelisks (const numObelisks_type& x)
  {
    this->numObelisks_.set (x);
  }

  const gamestate_t::field_6395_type& gamestate_t::
  field_6395 () const
  {
    return this->field_6395_.get ();
  }

  gamestate_t::field_6395_type& gamestate_t::
  field_6395 ()
  {
    return this->field_6395_.get ();
  }

  void gamestate_t::
  field_6395 (const field_6395_type& x)
  {
    this->field_6395_.set (x);
  }

  const gamestate_t::field_6396_type& gamestate_t::
  field_6396 () const
  {
    return this->field_6396_.get ();
  }

  gamestate_t::field_6396_type& gamestate_t::
  field_6396 ()
  {
    return this->field_6396_.get ();
  }

  void gamestate_t::
  field_6396 (const field_6396_type& x)
  {
    this->field_6396_.set (x);
  }

  const gamestate_t::field_6397_type& gamestate_t::
  field_6397 () const
  {
    return this->field_6397_.get ();
  }

  gamestate_t::field_6397_type& gamestate_t::
  field_6397 ()
  {
    return this->field_6397_.get ();
  }

  void gamestate_t::
  field_6397 (const field_6397_type& x)
  {
    this->field_6397_.set (x);
  }

  const gamestate_t::currentRumor_type& gamestate_t::
  currentRumor () const
  {
    return this->currentRumor_.get ();
  }

  gamestate_t::currentRumor_type& gamestate_t::
  currentRumor ()
  {
    return this->currentRumor_.get ();
  }

  void gamestate_t::
  currentRumor (const currentRumor_type& x)
  {
    this->currentRumor_.set (x);
  }

  void gamestate_t::
  currentRumor (::std::auto_ptr< currentRumor_type > x)
  {
    this->currentRumor_.set (x);
  }

  const gamestate_t::numRumors_type& gamestate_t::
  numRumors () const
  {
    return this->numRumors_.get ();
  }

  gamestate_t::numRumors_type& gamestate_t::
  numRumors ()
  {
    return this->numRumors_.get ();
  }

  void gamestate_t::
  numRumors (const numRumors_type& x)
  {
    this->numRumors_.set (x);
  }

  const gamestate_t::numEvents_type& gamestate_t::
  numEvents () const
  {
    return this->numEvents_.get ();
  }

  gamestate_t::numEvents_type& gamestate_t::
  numEvents ()
  {
    return this->numEvents_.get ();
  }

  void gamestate_t::
  numEvents (const numEvents_type& x)
  {
    this->numEvents_.set (x);
  }

  const gamestate_t::field_657B_type& gamestate_t::
  field_657B () const
  {
    return this->field_657B_.get ();
  }

  gamestate_t::field_657B_type& gamestate_t::
  field_657B ()
  {
    return this->field_657B_.get ();
  }

  void gamestate_t::
  field_657B (const field_657B_type& x)
  {
    this->field_657B_.set (x);
  }

  const gamestate_t::maxMapExtra_type& gamestate_t::
  maxMapExtra () const
  {
    return this->maxMapExtra_.get ();
  }

  gamestate_t::maxMapExtra_type& gamestate_t::
  maxMapExtra ()
  {
    return this->maxMapExtra_.get ();
  }

  void gamestate_t::
  maxMapExtra (const maxMapExtra_type& x)
  {
    this->maxMapExtra_.set (x);
  }

  const gamestate_t::playerNames_sequence& gamestate_t::
  playerNames () const
  {
    return this->playerNames_;
  }

  gamestate_t::playerNames_sequence& gamestate_t::
  playerNames ()
  {
    return this->playerNames_;
  }

  void gamestate_t::
  playerNames (const playerNames_sequence& s)
  {
    this->playerNames_ = s;
  }

  const gamestate_t::deadPlayers_sequence& gamestate_t::
  deadPlayers () const
  {
    return this->deadPlayers_;
  }

  gamestate_t::deadPlayers_sequence& gamestate_t::
  deadPlayers ()
  {
    return this->deadPlayers_;
  }

  void gamestate_t::
  deadPlayers (const deadPlayers_sequence& s)
  {
    this->deadPlayers_ = s;
  }

  const gamestate_t::alivePlayers_sequence& gamestate_t::
  alivePlayers () const
  {
    return this->alivePlayers_;
  }

  gamestate_t::alivePlayers_sequence& gamestate_t::
  alivePlayers ()
  {
    return this->alivePlayers_;
  }

  void gamestate_t::
  alivePlayers (const alivePlayers_sequence& s)
  {
    this->alivePlayers_ = s;
  }

  const gamestate_t::heroHireStatus_sequence& gamestate_t::
  heroHireStatus () const
  {
    return this->heroHireStatus_;
  }

  gamestate_t::heroHireStatus_sequence& gamestate_t::
  heroHireStatus ()
  {
    return this->heroHireStatus_;
  }

  void gamestate_t::
  heroHireStatus (const heroHireStatus_sequence& s)
  {
    this->heroHireStatus_ = s;
  }

  const gamestate_t::field_44D_type& gamestate_t::
  field_44D () const
  {
    return this->field_44D_.get ();
  }

  gamestate_t::field_44D_type& gamestate_t::
  field_44D ()
  {
    return this->field_44D_.get ();
  }

  void gamestate_t::
  field_44D (const field_44D_type& x)
  {
    this->field_44D_.set (x);
  }

  const gamestate_t::field_451_type& gamestate_t::
  field_451 () const
  {
    return this->field_451_.get ();
  }

  gamestate_t::field_451_type& gamestate_t::
  field_451 ()
  {
    return this->field_451_.get ();
  }

  void gamestate_t::
  field_451 (const field_451_type& x)
  {
    this->field_451_.set (x);
  }

  const gamestate_t::playerHandicap_sequence& gamestate_t::
  playerHandicap () const
  {
    return this->playerHandicap_;
  }

  gamestate_t::playerHandicap_sequence& gamestate_t::
  playerHandicap ()
  {
    return this->playerHandicap_;
  }

  void gamestate_t::
  playerHandicap (const playerHandicap_sequence& s)
  {
    this->playerHandicap_ = s;
  }

  const gamestate_t::field_459_sequence& gamestate_t::
  field_459 () const
  {
    return this->field_459_;
  }

  gamestate_t::field_459_sequence& gamestate_t::
  field_459 ()
  {
    return this->field_459_;
  }

  void gamestate_t::
  field_459 (const field_459_sequence& s)
  {
    this->field_459_ = s;
  }

  const gamestate_t::field_45F_sequence& gamestate_t::
  field_45F () const
  {
    return this->field_45F_;
  }

  gamestate_t::field_45F_sequence& gamestate_t::
  field_45F ()
  {
    return this->field_45F_;
  }

  void gamestate_t::
  field_45F (const field_45F_sequence& s)
  {
    this->field_45F_ = s;
  }

  const gamestate_t::difficulty_type& gamestate_t::
  difficulty () const
  {
    return this->difficulty_.get ();
  }

  gamestate_t::difficulty_type& gamestate_t::
  difficulty ()
  {
    return this->difficulty_.get ();
  }

  void gamestate_t::
  difficulty (const difficulty_type& x)
  {
    this->difficulty_.set (x);
  }

  const gamestate_t::mapFilename_type& gamestate_t::
  mapFilename () const
  {
    return this->mapFilename_.get ();
  }

  gamestate_t::mapFilename_type& gamestate_t::
  mapFilename ()
  {
    return this->mapFilename_.get ();
  }

  void gamestate_t::
  mapFilename (const mapFilename_type& x)
  {
    this->mapFilename_.set (x);
  }

  void gamestate_t::
  mapFilename (::std::auto_ptr< mapFilename_type > x)
  {
    this->mapFilename_.set (x);
  }

  const gamestate_t::field_2773_sequence& gamestate_t::
  field_2773 () const
  {
    return this->field_2773_;
  }

  gamestate_t::field_2773_sequence& gamestate_t::
  field_2773 ()
  {
    return this->field_2773_;
  }

  void gamestate_t::
  field_2773 (const field_2773_sequence& s)
  {
    this->field_2773_ = s;
  }

  const gamestate_t::field_27BB_sequence& gamestate_t::
  field_27BB () const
  {
    return this->field_27BB_;
  }

  gamestate_t::field_27BB_sequence& gamestate_t::
  field_27BB ()
  {
    return this->field_27BB_;
  }

  void gamestate_t::
  field_27BB (const field_27BB_sequence& s)
  {
    this->field_27BB_ = s;
  }

  const gamestate_t::field_60A6_sequence& gamestate_t::
  field_60A6 () const
  {
    return this->field_60A6_;
  }

  gamestate_t::field_60A6_sequence& gamestate_t::
  field_60A6 ()
  {
    return this->field_60A6_;
  }

  void gamestate_t::
  field_60A6 (const field_60A6_sequence& s)
  {
    this->field_60A6_ = s;
  }

  const gamestate_t::randomArtifacts_sequence& gamestate_t::
  randomArtifacts () const
  {
    return this->randomArtifacts_;
  }

  gamestate_t::randomArtifacts_sequence& gamestate_t::
  randomArtifacts ()
  {
    return this->randomArtifacts_;
  }

  void gamestate_t::
  randomArtifacts (const randomArtifacts_sequence& s)
  {
    this->randomArtifacts_ = s;
  }

  const gamestate_t::boatBuilt_sequence& gamestate_t::
  boatBuilt () const
  {
    return this->boatBuilt_;
  }

  gamestate_t::boatBuilt_sequence& gamestate_t::
  boatBuilt ()
  {
    return this->boatBuilt_;
  }

  void gamestate_t::
  boatBuilt (const boatBuilt_sequence& s)
  {
    this->boatBuilt_ = s;
  }

  const gamestate_t::obeliskVisitedMasks_sequence& gamestate_t::
  obeliskVisitedMasks () const
  {
    return this->obeliskVisitedMasks_;
  }

  gamestate_t::obeliskVisitedMasks_sequence& gamestate_t::
  obeliskVisitedMasks ()
  {
    return this->obeliskVisitedMasks_;
  }

  void gamestate_t::
  obeliskVisitedMasks (const obeliskVisitedMasks_sequence& s)
  {
    this->obeliskVisitedMasks_ = s;
  }

  const gamestate_t::field_637D_sequence& gamestate_t::
  field_637D () const
  {
    return this->field_637D_;
  }

  gamestate_t::field_637D_sequence& gamestate_t::
  field_637D ()
  {
    return this->field_637D_;
  }

  void gamestate_t::
  field_637D (const field_637D_sequence& s)
  {
    this->field_637D_ = s;
  }

  const gamestate_t::rumorIndices_sequence& gamestate_t::
  rumorIndices () const
  {
    return this->rumorIndices_;
  }

  gamestate_t::rumorIndices_sequence& gamestate_t::
  rumorIndices ()
  {
    return this->rumorIndices_;
  }

  void gamestate_t::
  rumorIndices (const rumorIndices_sequence& s)
  {
    this->rumorIndices_ = s;
  }

  const gamestate_t::eventIndices_sequence& gamestate_t::
  eventIndices () const
  {
    return this->eventIndices_;
  }

  gamestate_t::eventIndices_sequence& gamestate_t::
  eventIndices ()
  {
    return this->eventIndices_;
  }

  void gamestate_t::
  eventIndices (const eventIndices_sequence& s)
  {
    this->eventIndices_ = s;
  }

  const gamestate_t::_D_sequence& gamestate_t::
  _D () const
  {
    return this->_D_;
  }

  gamestate_t::_D_sequence& gamestate_t::
  _D ()
  {
    return this->_D_;
  }

  void gamestate_t::
  _D (const _D_sequence& s)
  {
    this->_D_ = s;
  }

  const gamestate_t::mapRevealed_sequence& gamestate_t::
  mapRevealed () const
  {
    return this->mapRevealed_;
  }

  gamestate_t::mapRevealed_sequence& gamestate_t::
  mapRevealed ()
  {
    return this->mapRevealed_;
  }

  void gamestate_t::
  mapRevealed (const mapRevealed_sequence& s)
  {
    this->mapRevealed_ = s;
  }

  const gamestate_t::mapExtra_sequence& gamestate_t::
  mapExtra () const
  {
    return this->mapExtra_;
  }

  gamestate_t::mapExtra_sequence& gamestate_t::
  mapExtra ()
  {
    return this->mapExtra_;
  }

  void gamestate_t::
  mapExtra (const mapExtra_sequence& s)
  {
    this->mapExtra_ = s;
  }


  // mapExtra_t
  // 

  const mapExtra_t::ppMapExtra_sequence& mapExtra_t::
  ppMapExtra () const
  {
    return this->ppMapExtra_;
  }

  mapExtra_t::ppMapExtra_sequence& mapExtra_t::
  ppMapExtra ()
  {
    return this->ppMapExtra_;
  }

  void mapExtra_t::
  ppMapExtra (const ppMapExtra_sequence& s)
  {
    this->ppMapExtra_ = s;
  }


  // map_t
  // 

  const map_t::gamestate_optional& map_t::
  gamestate () const
  {
    return this->gamestate_;
  }

  map_t::gamestate_optional& map_t::
  gamestate ()
  {
    return this->gamestate_;
  }

  void map_t::
  gamestate (const gamestate_type& x)
  {
    this->gamestate_.set (x);
  }

  void map_t::
  gamestate (const gamestate_optional& x)
  {
    this->gamestate_ = x;
  }

  void map_t::
  gamestate (::std::auto_ptr< gamestate_type > x)
  {
    this->gamestate_.set (x);
  }

  const map_t::hero_sequence& map_t::
  hero () const
  {
    return this->hero_;
  }

  map_t::hero_sequence& map_t::
  hero ()
  {
    return this->hero_;
  }

  void map_t::
  hero (const hero_sequence& s)
  {
    this->hero_ = s;
  }

  const map_t::mapVariable_sequence& map_t::
  mapVariable () const
  {
    return this->mapVariable_;
  }

  map_t::mapVariable_sequence& map_t::
  mapVariable ()
  {
    return this->mapVariable_;
  }

  void map_t::
  mapVariable (const mapVariable_sequence& s)
  {
    this->mapVariable_ = s;
  }

  const map_t::script_optional& map_t::
  script () const
  {
    return this->script_;
  }

  map_t::script_optional& map_t::
  script ()
  {
    return this->script_;
  }

  void map_t::
  script (const script_type& x)
  {
    this->script_.set (x);
  }

  void map_t::
  script (const script_optional& x)
  {
    this->script_ = x;
  }

  void map_t::
  script (::std::auto_ptr< script_type > x)
  {
    this->script_.set (x);
  }

  const map_t::raw_type& map_t::
  raw () const
  {
    return this->raw_.get ();
  }

  map_t::raw_type& map_t::
  raw ()
  {
    return this->raw_.get ();
  }

  void map_t::
  raw (const raw_type& x)
  {
    this->raw_.set (x);
  }

  void map_t::
  raw (::std::auto_ptr< raw_type > x)
  {
    this->raw_.set (x);
  }


  // secondarySkill
  // 

  const secondarySkill::id_optional& secondarySkill::
  id () const
  {
    return this->id_;
  }

  secondarySkill::id_optional& secondarySkill::
  id ()
  {
    return this->id_;
  }

  void secondarySkill::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void secondarySkill::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  const secondarySkill::level_optional& secondarySkill::
  level () const
  {
    return this->level_;
  }

  secondarySkill::level_optional& secondarySkill::
  level ()
  {
    return this->level_;
  }

  void secondarySkill::
  level (const level_type& x)
  {
    this->level_.set (x);
  }

  void secondarySkill::
  level (const level_optional& x)
  {
    this->level_ = x;
  }

  const secondarySkill::idx_optional& secondarySkill::
  idx () const
  {
    return this->idx_;
  }

  secondarySkill::idx_optional& secondarySkill::
  idx ()
  {
    return this->idx_;
  }

  void secondarySkill::
  idx (const idx_type& x)
  {
    this->idx_.set (x);
  }

  void secondarySkill::
  idx (const idx_optional& x)
  {
    this->idx_ = x;
  }


  // artifact
  // 

  const artifact::id_type& artifact::
  id () const
  {
    return this->id_.get ();
  }

  artifact::id_type& artifact::
  id ()
  {
    return this->id_.get ();
  }

  void artifact::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const artifact::spell_type& artifact::
  spell () const
  {
    return this->spell_.get ();
  }

  artifact::spell_type& artifact::
  spell ()
  {
    return this->spell_.get ();
  }

  void artifact::
  spell (const spell_type& x)
  {
    this->spell_.set (x);
  }

  artifact::spell_type artifact::
  spell_default_value ()
  {
    return spell_type (-1);
  }


  // playerNames
  // 

  const playerNames::id_type& playerNames::
  id () const
  {
    return this->id_.get ();
  }

  playerNames::id_type& playerNames::
  id ()
  {
    return this->id_.get ();
  }

  void playerNames::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const playerNames::name_optional& playerNames::
  name () const
  {
    return this->name_;
  }

  playerNames::name_optional& playerNames::
  name ()
  {
    return this->name_;
  }

  void playerNames::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void playerNames::
  name (const name_optional& x)
  {
    this->name_ = x;
  }

  void playerNames::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }


  // deadPlayers
  // 

  const deadPlayers::id_type& deadPlayers::
  id () const
  {
    return this->id_.get ();
  }

  deadPlayers::id_type& deadPlayers::
  id ()
  {
    return this->id_.get ();
  }

  void deadPlayers::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const deadPlayers::playerID_optional& deadPlayers::
  playerID () const
  {
    return this->playerID_;
  }

  deadPlayers::playerID_optional& deadPlayers::
  playerID ()
  {
    return this->playerID_;
  }

  void deadPlayers::
  playerID (const playerID_type& x)
  {
    this->playerID_.set (x);
  }

  void deadPlayers::
  playerID (const playerID_optional& x)
  {
    this->playerID_ = x;
  }


  // alivePlayers
  // 

  const alivePlayers::id_type& alivePlayers::
  id () const
  {
    return this->id_.get ();
  }

  alivePlayers::id_type& alivePlayers::
  id ()
  {
    return this->id_.get ();
  }

  void alivePlayers::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const alivePlayers::playerID_optional& alivePlayers::
  playerID () const
  {
    return this->playerID_;
  }

  alivePlayers::playerID_optional& alivePlayers::
  playerID ()
  {
    return this->playerID_;
  }

  void alivePlayers::
  playerID (const playerID_type& x)
  {
    this->playerID_.set (x);
  }

  void alivePlayers::
  playerID (const playerID_optional& x)
  {
    this->playerID_ = x;
  }


  // heroHireStatus
  // 

  const heroHireStatus::id_type& heroHireStatus::
  id () const
  {
    return this->id_.get ();
  }

  heroHireStatus::id_type& heroHireStatus::
  id ()
  {
    return this->id_.get ();
  }

  void heroHireStatus::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const heroHireStatus::status_optional& heroHireStatus::
  status () const
  {
    return this->status_;
  }

  heroHireStatus::status_optional& heroHireStatus::
  status ()
  {
    return this->status_;
  }

  void heroHireStatus::
  status (const status_type& x)
  {
    this->status_.set (x);
  }

  void heroHireStatus::
  status (const status_optional& x)
  {
    this->status_ = x;
  }


  // playerHandicap
  // 

  const playerHandicap::id_type& playerHandicap::
  id () const
  {
    return this->id_.get ();
  }

  playerHandicap::id_type& playerHandicap::
  id ()
  {
    return this->id_.get ();
  }

  void playerHandicap::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const playerHandicap::handicap_optional& playerHandicap::
  handicap () const
  {
    return this->handicap_;
  }

  playerHandicap::handicap_optional& playerHandicap::
  handicap ()
  {
    return this->handicap_;
  }

  void playerHandicap::
  handicap (const handicap_type& x)
  {
    this->handicap_.set (x);
  }

  void playerHandicap::
  handicap (const handicap_optional& x)
  {
    this->handicap_ = x;
  }


  // field_459
  // 

  const field_459::id_type& field_459::
  id () const
  {
    return this->id_.get ();
  }

  field_459::id_type& field_459::
  id ()
  {
    return this->id_.get ();
  }

  void field_459::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const field_459::value_optional& field_459::
  value () const
  {
    return this->value_;
  }

  field_459::value_optional& field_459::
  value ()
  {
    return this->value_;
  }

  void field_459::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void field_459::
  value (const value_optional& x)
  {
    this->value_ = x;
  }


  // field_45F
  // 

  const field_45F::id_type& field_45F::
  id () const
  {
    return this->id_.get ();
  }

  field_45F::id_type& field_45F::
  id ()
  {
    return this->id_.get ();
  }

  void field_45F::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const field_45F::value_optional& field_45F::
  value () const
  {
    return this->value_;
  }

  field_45F::value_optional& field_45F::
  value ()
  {
    return this->value_;
  }

  void field_45F::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void field_45F::
  value (const value_optional& x)
  {
    this->value_ = x;
  }


  // field_2773
  // 

  const field_2773::id_type& field_2773::
  id () const
  {
    return this->id_.get ();
  }

  field_2773::id_type& field_2773::
  id ()
  {
    return this->id_.get ();
  }

  void field_2773::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const field_2773::value_optional& field_2773::
  value () const
  {
    return this->value_;
  }

  field_2773::value_optional& field_2773::
  value ()
  {
    return this->value_;
  }

  void field_2773::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void field_2773::
  value (const value_optional& x)
  {
    this->value_ = x;
  }


  // field_27BB
  // 

  const field_27BB::id_type& field_27BB::
  id () const
  {
    return this->id_.get ();
  }

  field_27BB::id_type& field_27BB::
  id ()
  {
    return this->id_.get ();
  }

  void field_27BB::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const field_27BB::value_optional& field_27BB::
  value () const
  {
    return this->value_;
  }

  field_27BB::value_optional& field_27BB::
  value ()
  {
    return this->value_;
  }

  void field_27BB::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void field_27BB::
  value (const value_optional& x)
  {
    this->value_ = x;
  }


  // field_60A6
  // 

  const field_60A6::id_type& field_60A6::
  id () const
  {
    return this->id_.get ();
  }

  field_60A6::id_type& field_60A6::
  id ()
  {
    return this->id_.get ();
  }

  void field_60A6::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const field_60A6::value_optional& field_60A6::
  value () const
  {
    return this->value_;
  }

  field_60A6::value_optional& field_60A6::
  value ()
  {
    return this->value_;
  }

  void field_60A6::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void field_60A6::
  value (const value_optional& x)
  {
    this->value_ = x;
  }


  // randomArtifacts
  // 

  const randomArtifacts::id_type& randomArtifacts::
  id () const
  {
    return this->id_.get ();
  }

  randomArtifacts::id_type& randomArtifacts::
  id ()
  {
    return this->id_.get ();
  }

  void randomArtifacts::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const randomArtifacts::artifact_optional& randomArtifacts::
  artifact () const
  {
    return this->artifact_;
  }

  randomArtifacts::artifact_optional& randomArtifacts::
  artifact ()
  {
    return this->artifact_;
  }

  void randomArtifacts::
  artifact (const artifact_type& x)
  {
    this->artifact_.set (x);
  }

  void randomArtifacts::
  artifact (const artifact_optional& x)
  {
    this->artifact_ = x;
  }


  // boatBuilt
  // 

  const boatBuilt::id_type& boatBuilt::
  id () const
  {
    return this->id_.get ();
  }

  boatBuilt::id_type& boatBuilt::
  id ()
  {
    return this->id_.get ();
  }

  void boatBuilt::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const boatBuilt::boat_optional& boatBuilt::
  boat () const
  {
    return this->boat_;
  }

  boatBuilt::boat_optional& boatBuilt::
  boat ()
  {
    return this->boat_;
  }

  void boatBuilt::
  boat (const boat_type& x)
  {
    this->boat_.set (x);
  }

  void boatBuilt::
  boat (const boat_optional& x)
  {
    this->boat_ = x;
  }


  // obeliskVisitedMasks
  // 

  const obeliskVisitedMasks::id_type& obeliskVisitedMasks::
  id () const
  {
    return this->id_.get ();
  }

  obeliskVisitedMasks::id_type& obeliskVisitedMasks::
  id ()
  {
    return this->id_.get ();
  }

  void obeliskVisitedMasks::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const obeliskVisitedMasks::obelisk_optional& obeliskVisitedMasks::
  obelisk () const
  {
    return this->obelisk_;
  }

  obeliskVisitedMasks::obelisk_optional& obeliskVisitedMasks::
  obelisk ()
  {
    return this->obelisk_;
  }

  void obeliskVisitedMasks::
  obelisk (const obelisk_type& x)
  {
    this->obelisk_.set (x);
  }

  void obeliskVisitedMasks::
  obelisk (const obelisk_optional& x)
  {
    this->obelisk_ = x;
  }


  // field_637D
  // 

  const field_637D::id_type& field_637D::
  id () const
  {
    return this->id_.get ();
  }

  field_637D::id_type& field_637D::
  id ()
  {
    return this->id_.get ();
  }

  void field_637D::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const field_637D::value_optional& field_637D::
  value () const
  {
    return this->value_;
  }

  field_637D::value_optional& field_637D::
  value ()
  {
    return this->value_;
  }

  void field_637D::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void field_637D::
  value (const value_optional& x)
  {
    this->value_ = x;
  }


  // rumorIndices
  // 

  const rumorIndices::id_type& rumorIndices::
  id () const
  {
    return this->id_.get ();
  }

  rumorIndices::id_type& rumorIndices::
  id ()
  {
    return this->id_.get ();
  }

  void rumorIndices::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const rumorIndices::index_optional& rumorIndices::
  index () const
  {
    return this->index_;
  }

  rumorIndices::index_optional& rumorIndices::
  index ()
  {
    return this->index_;
  }

  void rumorIndices::
  index (const index_type& x)
  {
    this->index_.set (x);
  }

  void rumorIndices::
  index (const index_optional& x)
  {
    this->index_ = x;
  }


  // eventIndices
  // 

  const eventIndices::id_type& eventIndices::
  id () const
  {
    return this->id_.get ();
  }

  eventIndices::id_type& eventIndices::
  id ()
  {
    return this->id_.get ();
  }

  void eventIndices::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const eventIndices::index_optional& eventIndices::
  index () const
  {
    return this->index_;
  }

  eventIndices::index_optional& eventIndices::
  index ()
  {
    return this->index_;
  }

  void eventIndices::
  index (const index_type& x)
  {
    this->index_.set (x);
  }

  void eventIndices::
  index (const index_optional& x)
  {
    this->index_ = x;
  }


  // _D
  // 

  const _D::id_type& _D::
  id () const
  {
    return this->id_.get ();
  }

  _D::id_type& _D::
  id ()
  {
    return this->id_.get ();
  }

  void _D::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const _D::value_optional& _D::
  value () const
  {
    return this->value_;
  }

  _D::value_optional& _D::
  value ()
  {
    return this->value_;
  }

  void _D::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void _D::
  value (const value_optional& x)
  {
    this->value_ = x;
  }


  // mapRevealed
  // 

  const mapRevealed::id_type& mapRevealed::
  id () const
  {
    return this->id_.get ();
  }

  mapRevealed::id_type& mapRevealed::
  id ()
  {
    return this->id_.get ();
  }

  void mapRevealed::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const mapRevealed::x_type& mapRevealed::
  x () const
  {
    return this->x_.get ();
  }

  mapRevealed::x_type& mapRevealed::
  x ()
  {
    return this->x_.get ();
  }

  void mapRevealed::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const mapRevealed::y_type& mapRevealed::
  y () const
  {
    return this->y_.get ();
  }

  mapRevealed::y_type& mapRevealed::
  y ()
  {
    return this->y_.get ();
  }

  void mapRevealed::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  const mapRevealed::revealed_optional& mapRevealed::
  revealed () const
  {
    return this->revealed_;
  }

  mapRevealed::revealed_optional& mapRevealed::
  revealed ()
  {
    return this->revealed_;
  }

  void mapRevealed::
  revealed (const revealed_type& x)
  {
    this->revealed_.set (x);
  }

  void mapRevealed::
  revealed (const revealed_optional& x)
  {
    this->revealed_ = x;
  }


  // ppMapExtra
  // 

  const ppMapExtra::id_type& ppMapExtra::
  id () const
  {
    return this->id_.get ();
  }

  ppMapExtra::id_type& ppMapExtra::
  id ()
  {
    return this->id_.get ();
  }

  void ppMapExtra::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const ppMapExtra::value_optional& ppMapExtra::
  value () const
  {
    return this->value_;
  }

  ppMapExtra::value_optional& ppMapExtra::
  value ()
  {
    return this->value_;
  }

  void ppMapExtra::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void ppMapExtra::
  value (const value_optional& x)
  {
    this->value_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace ironfist_map
{
  // slot_t
  //

  slot_t::
  slot_t ()
  : ::xml_schema::type (),
    id_ (::xml_schema::flags (), this),
    quantity_ (::xml_schema::flags (), this)
  {
  }

  slot_t::
  slot_t (const slot_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    quantity_ (x.quantity_, f, this)
  {
  }

  slot_t::
  slot_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    quantity_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void slot_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "quantity" && n.namespace_ ().empty ())
      {
        this->quantity_.set (quantity_traits::create (i, f, this));
        continue;
      }
    }
  }

  slot_t* slot_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class slot_t (*this, f, c);
  }

  slot_t::
  ~slot_t ()
  {
  }

  // army_t
  //

  army_t::
  army_t ()
  : ::xml_schema::type (),
    slot_ (::xml_schema::flags (), this)
  {
  }

  army_t::
  army_t (const army_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    slot_ (x.slot_, f, this)
  {
  }

  army_t::
  army_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    slot_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void army_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // slot
      //
      if (n.name () == "slot" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< slot_type > r (
          slot_traits::create (i, f, this));

        this->slot_.push_back (r);
        continue;
      }

      break;
    }
  }

  army_t* army_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class army_t (*this, f, c);
  }

  army_t::
  ~army_t ()
  {
  }

  // hero_t
  //

  hero_t::
  hero_t (const spellpoints_type& spellpoints,
          const idx_type& idx,
          const ownerIdx_type& ownerIdx,
          const field_4_type& field_4,
          const field_5_type& field_5,
          const field_6_type& field_6,
          const field_7_type& field_7,
          const field_8_type& field_8,
          const field_9_type& field_9,
          const name_type& name,
          const factionID_type& factionID,
          const heroID_type& heroID,
          const x_type& x,
          const y_type& y,
          const field_21_type& field_21,
          const field_23_type& field_23,
          const field_25_type& field_25,
          const field_27_type& field_27,
          const field_29_type& field_29,
          const field_2B_type& field_2B,
          const occupiedObjType_type& occupiedObjType,
          const occupiedObjVal_type& occupiedObjVal,
          const mobility_type& mobility,
          const remainingMobility_type& remainingMobility,
          const experience_type& experience,
          const oldLevel_type& oldLevel,
          const attack_type& attack,
          const defense_type& defense,
          const spellpower_type& spellpower,
          const knowledge_type& knowledge,
          const field_43_type& field_43,
          const tempMoraleBonuses_type& tempMoraleBonuses,
          const tempLuckBonuses_type& tempLuckBonuses,
          const field_46_type& field_46,
          const gazeboesVisited_type& gazeboesVisited,
          const fortsVisited_type& fortsVisited,
          const witchDoctorHutsVisited_type& witchDoctorHutsVisited,
          const mercenaryCampsVisited_type& mercenaryCampsVisited,
          const standingStonesVisited_type& standingStonesVisited,
          const treesOfKnowledgeVisited_type& treesOfKnowledgeVisited,
          const xanadusVisited_type& xanadusVisited,
          const randomSeed_type& randomSeed,
          const wisdomLastOffered_type& wisdomLastOffered,
          const army_type& army,
          const flags_type& flags,
          const isCaptain_type& isCaptain,
          const field_E8_type& field_E8)
  : ::xml_schema::type (),
    spellpoints_ (spellpoints, ::xml_schema::flags (), this),
    idx_ (idx, ::xml_schema::flags (), this),
    ownerIdx_ (ownerIdx, ::xml_schema::flags (), this),
    field_4_ (field_4, ::xml_schema::flags (), this),
    field_5_ (field_5, ::xml_schema::flags (), this),
    field_6_ (field_6, ::xml_schema::flags (), this),
    field_7_ (field_7, ::xml_schema::flags (), this),
    field_8_ (field_8, ::xml_schema::flags (), this),
    field_9_ (field_9, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this),
    factionID_ (factionID, ::xml_schema::flags (), this),
    heroID_ (heroID, ::xml_schema::flags (), this),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    field_21_ (field_21, ::xml_schema::flags (), this),
    field_23_ (field_23, ::xml_schema::flags (), this),
    field_25_ (field_25, ::xml_schema::flags (), this),
    field_27_ (field_27, ::xml_schema::flags (), this),
    field_29_ (field_29, ::xml_schema::flags (), this),
    field_2B_ (field_2B, ::xml_schema::flags (), this),
    occupiedObjType_ (occupiedObjType, ::xml_schema::flags (), this),
    occupiedObjVal_ (occupiedObjVal, ::xml_schema::flags (), this),
    mobility_ (mobility, ::xml_schema::flags (), this),
    remainingMobility_ (remainingMobility, ::xml_schema::flags (), this),
    experience_ (experience, ::xml_schema::flags (), this),
    oldLevel_ (oldLevel, ::xml_schema::flags (), this),
    attack_ (attack, ::xml_schema::flags (), this),
    defense_ (defense, ::xml_schema::flags (), this),
    spellpower_ (spellpower, ::xml_schema::flags (), this),
    knowledge_ (knowledge, ::xml_schema::flags (), this),
    field_43_ (field_43, ::xml_schema::flags (), this),
    tempMoraleBonuses_ (tempMoraleBonuses, ::xml_schema::flags (), this),
    tempLuckBonuses_ (tempLuckBonuses, ::xml_schema::flags (), this),
    field_46_ (field_46, ::xml_schema::flags (), this),
    gazeboesVisited_ (gazeboesVisited, ::xml_schema::flags (), this),
    fortsVisited_ (fortsVisited, ::xml_schema::flags (), this),
    witchDoctorHutsVisited_ (witchDoctorHutsVisited, ::xml_schema::flags (), this),
    mercenaryCampsVisited_ (mercenaryCampsVisited, ::xml_schema::flags (), this),
    standingStonesVisited_ (standingStonesVisited, ::xml_schema::flags (), this),
    treesOfKnowledgeVisited_ (treesOfKnowledgeVisited, ::xml_schema::flags (), this),
    xanadusVisited_ (xanadusVisited, ::xml_schema::flags (), this),
    randomSeed_ (randomSeed, ::xml_schema::flags (), this),
    wisdomLastOffered_ (wisdomLastOffered, ::xml_schema::flags (), this),
    army_ (army, ::xml_schema::flags (), this),
    secondarySkill_ (::xml_schema::flags (), this),
    spell_ (::xml_schema::flags (), this),
    artifact_ (::xml_schema::flags (), this),
    flags_ (flags, ::xml_schema::flags (), this),
    isCaptain_ (isCaptain, ::xml_schema::flags (), this),
    field_E8_ (field_E8, ::xml_schema::flags (), this)
  {
  }

  hero_t::
  hero_t (const spellpoints_type& spellpoints,
          const idx_type& idx,
          const ownerIdx_type& ownerIdx,
          const field_4_type& field_4,
          const field_5_type& field_5,
          const field_6_type& field_6,
          const field_7_type& field_7,
          const field_8_type& field_8,
          const field_9_type& field_9,
          const name_type& name,
          const factionID_type& factionID,
          const heroID_type& heroID,
          const x_type& x,
          const y_type& y,
          const field_21_type& field_21,
          const field_23_type& field_23,
          const field_25_type& field_25,
          const field_27_type& field_27,
          const field_29_type& field_29,
          const field_2B_type& field_2B,
          const occupiedObjType_type& occupiedObjType,
          const occupiedObjVal_type& occupiedObjVal,
          const mobility_type& mobility,
          const remainingMobility_type& remainingMobility,
          const experience_type& experience,
          const oldLevel_type& oldLevel,
          const attack_type& attack,
          const defense_type& defense,
          const spellpower_type& spellpower,
          const knowledge_type& knowledge,
          const field_43_type& field_43,
          const tempMoraleBonuses_type& tempMoraleBonuses,
          const tempLuckBonuses_type& tempLuckBonuses,
          const field_46_type& field_46,
          const gazeboesVisited_type& gazeboesVisited,
          const fortsVisited_type& fortsVisited,
          const witchDoctorHutsVisited_type& witchDoctorHutsVisited,
          const mercenaryCampsVisited_type& mercenaryCampsVisited,
          const standingStonesVisited_type& standingStonesVisited,
          const treesOfKnowledgeVisited_type& treesOfKnowledgeVisited,
          const xanadusVisited_type& xanadusVisited,
          const randomSeed_type& randomSeed,
          const wisdomLastOffered_type& wisdomLastOffered,
          ::std::auto_ptr< army_type >& army,
          const flags_type& flags,
          const isCaptain_type& isCaptain,
          const field_E8_type& field_E8)
  : ::xml_schema::type (),
    spellpoints_ (spellpoints, ::xml_schema::flags (), this),
    idx_ (idx, ::xml_schema::flags (), this),
    ownerIdx_ (ownerIdx, ::xml_schema::flags (), this),
    field_4_ (field_4, ::xml_schema::flags (), this),
    field_5_ (field_5, ::xml_schema::flags (), this),
    field_6_ (field_6, ::xml_schema::flags (), this),
    field_7_ (field_7, ::xml_schema::flags (), this),
    field_8_ (field_8, ::xml_schema::flags (), this),
    field_9_ (field_9, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this),
    factionID_ (factionID, ::xml_schema::flags (), this),
    heroID_ (heroID, ::xml_schema::flags (), this),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    field_21_ (field_21, ::xml_schema::flags (), this),
    field_23_ (field_23, ::xml_schema::flags (), this),
    field_25_ (field_25, ::xml_schema::flags (), this),
    field_27_ (field_27, ::xml_schema::flags (), this),
    field_29_ (field_29, ::xml_schema::flags (), this),
    field_2B_ (field_2B, ::xml_schema::flags (), this),
    occupiedObjType_ (occupiedObjType, ::xml_schema::flags (), this),
    occupiedObjVal_ (occupiedObjVal, ::xml_schema::flags (), this),
    mobility_ (mobility, ::xml_schema::flags (), this),
    remainingMobility_ (remainingMobility, ::xml_schema::flags (), this),
    experience_ (experience, ::xml_schema::flags (), this),
    oldLevel_ (oldLevel, ::xml_schema::flags (), this),
    attack_ (attack, ::xml_schema::flags (), this),
    defense_ (defense, ::xml_schema::flags (), this),
    spellpower_ (spellpower, ::xml_schema::flags (), this),
    knowledge_ (knowledge, ::xml_schema::flags (), this),
    field_43_ (field_43, ::xml_schema::flags (), this),
    tempMoraleBonuses_ (tempMoraleBonuses, ::xml_schema::flags (), this),
    tempLuckBonuses_ (tempLuckBonuses, ::xml_schema::flags (), this),
    field_46_ (field_46, ::xml_schema::flags (), this),
    gazeboesVisited_ (gazeboesVisited, ::xml_schema::flags (), this),
    fortsVisited_ (fortsVisited, ::xml_schema::flags (), this),
    witchDoctorHutsVisited_ (witchDoctorHutsVisited, ::xml_schema::flags (), this),
    mercenaryCampsVisited_ (mercenaryCampsVisited, ::xml_schema::flags (), this),
    standingStonesVisited_ (standingStonesVisited, ::xml_schema::flags (), this),
    treesOfKnowledgeVisited_ (treesOfKnowledgeVisited, ::xml_schema::flags (), this),
    xanadusVisited_ (xanadusVisited, ::xml_schema::flags (), this),
    randomSeed_ (randomSeed, ::xml_schema::flags (), this),
    wisdomLastOffered_ (wisdomLastOffered, ::xml_schema::flags (), this),
    army_ (army, ::xml_schema::flags (), this),
    secondarySkill_ (::xml_schema::flags (), this),
    spell_ (::xml_schema::flags (), this),
    artifact_ (::xml_schema::flags (), this),
    flags_ (flags, ::xml_schema::flags (), this),
    isCaptain_ (isCaptain, ::xml_schema::flags (), this),
    field_E8_ (field_E8, ::xml_schema::flags (), this)
  {
  }

  hero_t::
  hero_t (const hero_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    spellpoints_ (x.spellpoints_, f, this),
    idx_ (x.idx_, f, this),
    ownerIdx_ (x.ownerIdx_, f, this),
    field_4_ (x.field_4_, f, this),
    field_5_ (x.field_5_, f, this),
    field_6_ (x.field_6_, f, this),
    field_7_ (x.field_7_, f, this),
    field_8_ (x.field_8_, f, this),
    field_9_ (x.field_9_, f, this),
    name_ (x.name_, f, this),
    factionID_ (x.factionID_, f, this),
    heroID_ (x.heroID_, f, this),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    field_21_ (x.field_21_, f, this),
    field_23_ (x.field_23_, f, this),
    field_25_ (x.field_25_, f, this),
    field_27_ (x.field_27_, f, this),
    field_29_ (x.field_29_, f, this),
    field_2B_ (x.field_2B_, f, this),
    occupiedObjType_ (x.occupiedObjType_, f, this),
    occupiedObjVal_ (x.occupiedObjVal_, f, this),
    mobility_ (x.mobility_, f, this),
    remainingMobility_ (x.remainingMobility_, f, this),
    experience_ (x.experience_, f, this),
    oldLevel_ (x.oldLevel_, f, this),
    attack_ (x.attack_, f, this),
    defense_ (x.defense_, f, this),
    spellpower_ (x.spellpower_, f, this),
    knowledge_ (x.knowledge_, f, this),
    field_43_ (x.field_43_, f, this),
    tempMoraleBonuses_ (x.tempMoraleBonuses_, f, this),
    tempLuckBonuses_ (x.tempLuckBonuses_, f, this),
    field_46_ (x.field_46_, f, this),
    gazeboesVisited_ (x.gazeboesVisited_, f, this),
    fortsVisited_ (x.fortsVisited_, f, this),
    witchDoctorHutsVisited_ (x.witchDoctorHutsVisited_, f, this),
    mercenaryCampsVisited_ (x.mercenaryCampsVisited_, f, this),
    standingStonesVisited_ (x.standingStonesVisited_, f, this),
    treesOfKnowledgeVisited_ (x.treesOfKnowledgeVisited_, f, this),
    xanadusVisited_ (x.xanadusVisited_, f, this),
    randomSeed_ (x.randomSeed_, f, this),
    wisdomLastOffered_ (x.wisdomLastOffered_, f, this),
    army_ (x.army_, f, this),
    secondarySkill_ (x.secondarySkill_, f, this),
    spell_ (x.spell_, f, this),
    artifact_ (x.artifact_, f, this),
    flags_ (x.flags_, f, this),
    isCaptain_ (x.isCaptain_, f, this),
    field_E8_ (x.field_E8_, f, this)
  {
  }

  hero_t::
  hero_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    spellpoints_ (f, this),
    idx_ (f, this),
    ownerIdx_ (f, this),
    field_4_ (f, this),
    field_5_ (f, this),
    field_6_ (f, this),
    field_7_ (f, this),
    field_8_ (f, this),
    field_9_ (f, this),
    name_ (f, this),
    factionID_ (f, this),
    heroID_ (f, this),
    x_ (f, this),
    y_ (f, this),
    field_21_ (f, this),
    field_23_ (f, this),
    field_25_ (f, this),
    field_27_ (f, this),
    field_29_ (f, this),
    field_2B_ (f, this),
    occupiedObjType_ (f, this),
    occupiedObjVal_ (f, this),
    mobility_ (f, this),
    remainingMobility_ (f, this),
    experience_ (f, this),
    oldLevel_ (f, this),
    attack_ (f, this),
    defense_ (f, this),
    spellpower_ (f, this),
    knowledge_ (f, this),
    field_43_ (f, this),
    tempMoraleBonuses_ (f, this),
    tempLuckBonuses_ (f, this),
    field_46_ (f, this),
    gazeboesVisited_ (f, this),
    fortsVisited_ (f, this),
    witchDoctorHutsVisited_ (f, this),
    mercenaryCampsVisited_ (f, this),
    standingStonesVisited_ (f, this),
    treesOfKnowledgeVisited_ (f, this),
    xanadusVisited_ (f, this),
    randomSeed_ (f, this),
    wisdomLastOffered_ (f, this),
    army_ (f, this),
    secondarySkill_ (f, this),
    spell_ (f, this),
    artifact_ (f, this),
    flags_ (f, this),
    isCaptain_ (f, this),
    field_E8_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void hero_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // spellpoints
      //
      if (n.name () == "spellpoints" && n.namespace_ ().empty ())
      {
        if (!spellpoints_.present ())
        {
          this->spellpoints_.set (spellpoints_traits::create (i, f, this));
          continue;
        }
      }

      // idx
      //
      if (n.name () == "idx" && n.namespace_ ().empty ())
      {
        if (!idx_.present ())
        {
          this->idx_.set (idx_traits::create (i, f, this));
          continue;
        }
      }

      // ownerIdx
      //
      if (n.name () == "ownerIdx" && n.namespace_ ().empty ())
      {
        if (!ownerIdx_.present ())
        {
          this->ownerIdx_.set (ownerIdx_traits::create (i, f, this));
          continue;
        }
      }

      // field_4
      //
      if (n.name () == "field_4" && n.namespace_ ().empty ())
      {
        if (!field_4_.present ())
        {
          this->field_4_.set (field_4_traits::create (i, f, this));
          continue;
        }
      }

      // field_5
      //
      if (n.name () == "field_5" && n.namespace_ ().empty ())
      {
        if (!field_5_.present ())
        {
          this->field_5_.set (field_5_traits::create (i, f, this));
          continue;
        }
      }

      // field_6
      //
      if (n.name () == "field_6" && n.namespace_ ().empty ())
      {
        if (!field_6_.present ())
        {
          this->field_6_.set (field_6_traits::create (i, f, this));
          continue;
        }
      }

      // field_7
      //
      if (n.name () == "field_7" && n.namespace_ ().empty ())
      {
        if (!field_7_.present ())
        {
          this->field_7_.set (field_7_traits::create (i, f, this));
          continue;
        }
      }

      // field_8
      //
      if (n.name () == "field_8" && n.namespace_ ().empty ())
      {
        if (!field_8_.present ())
        {
          this->field_8_.set (field_8_traits::create (i, f, this));
          continue;
        }
      }

      // field_9
      //
      if (n.name () == "field_9" && n.namespace_ ().empty ())
      {
        if (!field_9_.present ())
        {
          this->field_9_.set (field_9_traits::create (i, f, this));
          continue;
        }
      }

      // name
      //
      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (r);
          continue;
        }
      }

      // factionID
      //
      if (n.name () == "factionID" && n.namespace_ ().empty ())
      {
        if (!factionID_.present ())
        {
          this->factionID_.set (factionID_traits::create (i, f, this));
          continue;
        }
      }

      // heroID
      //
      if (n.name () == "heroID" && n.namespace_ ().empty ())
      {
        if (!heroID_.present ())
        {
          this->heroID_.set (heroID_traits::create (i, f, this));
          continue;
        }
      }

      // x
      //
      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        if (!x_.present ())
        {
          this->x_.set (x_traits::create (i, f, this));
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        if (!y_.present ())
        {
          this->y_.set (y_traits::create (i, f, this));
          continue;
        }
      }

      // field_21
      //
      if (n.name () == "field_21" && n.namespace_ ().empty ())
      {
        if (!field_21_.present ())
        {
          this->field_21_.set (field_21_traits::create (i, f, this));
          continue;
        }
      }

      // field_23
      //
      if (n.name () == "field_23" && n.namespace_ ().empty ())
      {
        if (!field_23_.present ())
        {
          this->field_23_.set (field_23_traits::create (i, f, this));
          continue;
        }
      }

      // field_25
      //
      if (n.name () == "field_25" && n.namespace_ ().empty ())
      {
        if (!field_25_.present ())
        {
          this->field_25_.set (field_25_traits::create (i, f, this));
          continue;
        }
      }

      // field_27
      //
      if (n.name () == "field_27" && n.namespace_ ().empty ())
      {
        if (!field_27_.present ())
        {
          this->field_27_.set (field_27_traits::create (i, f, this));
          continue;
        }
      }

      // field_29
      //
      if (n.name () == "field_29" && n.namespace_ ().empty ())
      {
        if (!field_29_.present ())
        {
          this->field_29_.set (field_29_traits::create (i, f, this));
          continue;
        }
      }

      // field_2B
      //
      if (n.name () == "field_2B" && n.namespace_ ().empty ())
      {
        if (!field_2B_.present ())
        {
          this->field_2B_.set (field_2B_traits::create (i, f, this));
          continue;
        }
      }

      // occupiedObjType
      //
      if (n.name () == "occupiedObjType" && n.namespace_ ().empty ())
      {
        if (!occupiedObjType_.present ())
        {
          this->occupiedObjType_.set (occupiedObjType_traits::create (i, f, this));
          continue;
        }
      }

      // occupiedObjVal
      //
      if (n.name () == "occupiedObjVal" && n.namespace_ ().empty ())
      {
        if (!occupiedObjVal_.present ())
        {
          this->occupiedObjVal_.set (occupiedObjVal_traits::create (i, f, this));
          continue;
        }
      }

      // mobility
      //
      if (n.name () == "mobility" && n.namespace_ ().empty ())
      {
        if (!mobility_.present ())
        {
          this->mobility_.set (mobility_traits::create (i, f, this));
          continue;
        }
      }

      // remainingMobility
      //
      if (n.name () == "remainingMobility" && n.namespace_ ().empty ())
      {
        if (!remainingMobility_.present ())
        {
          this->remainingMobility_.set (remainingMobility_traits::create (i, f, this));
          continue;
        }
      }

      // experience
      //
      if (n.name () == "experience" && n.namespace_ ().empty ())
      {
        if (!experience_.present ())
        {
          this->experience_.set (experience_traits::create (i, f, this));
          continue;
        }
      }

      // oldLevel
      //
      if (n.name () == "oldLevel" && n.namespace_ ().empty ())
      {
        if (!oldLevel_.present ())
        {
          this->oldLevel_.set (oldLevel_traits::create (i, f, this));
          continue;
        }
      }

      // attack
      //
      if (n.name () == "attack" && n.namespace_ ().empty ())
      {
        if (!attack_.present ())
        {
          this->attack_.set (attack_traits::create (i, f, this));
          continue;
        }
      }

      // defense
      //
      if (n.name () == "defense" && n.namespace_ ().empty ())
      {
        if (!defense_.present ())
        {
          this->defense_.set (defense_traits::create (i, f, this));
          continue;
        }
      }

      // spellpower
      //
      if (n.name () == "spellpower" && n.namespace_ ().empty ())
      {
        if (!spellpower_.present ())
        {
          this->spellpower_.set (spellpower_traits::create (i, f, this));
          continue;
        }
      }

      // knowledge
      //
      if (n.name () == "knowledge" && n.namespace_ ().empty ())
      {
        if (!knowledge_.present ())
        {
          this->knowledge_.set (knowledge_traits::create (i, f, this));
          continue;
        }
      }

      // field_43
      //
      if (n.name () == "field_43" && n.namespace_ ().empty ())
      {
        if (!field_43_.present ())
        {
          this->field_43_.set (field_43_traits::create (i, f, this));
          continue;
        }
      }

      // tempMoraleBonuses
      //
      if (n.name () == "tempMoraleBonuses" && n.namespace_ ().empty ())
      {
        if (!tempMoraleBonuses_.present ())
        {
          this->tempMoraleBonuses_.set (tempMoraleBonuses_traits::create (i, f, this));
          continue;
        }
      }

      // tempLuckBonuses
      //
      if (n.name () == "tempLuckBonuses" && n.namespace_ ().empty ())
      {
        if (!tempLuckBonuses_.present ())
        {
          this->tempLuckBonuses_.set (tempLuckBonuses_traits::create (i, f, this));
          continue;
        }
      }

      // field_46
      //
      if (n.name () == "field_46" && n.namespace_ ().empty ())
      {
        if (!field_46_.present ())
        {
          this->field_46_.set (field_46_traits::create (i, f, this));
          continue;
        }
      }

      // gazeboesVisited
      //
      if (n.name () == "gazeboesVisited" && n.namespace_ ().empty ())
      {
        if (!gazeboesVisited_.present ())
        {
          this->gazeboesVisited_.set (gazeboesVisited_traits::create (i, f, this));
          continue;
        }
      }

      // fortsVisited
      //
      if (n.name () == "fortsVisited" && n.namespace_ ().empty ())
      {
        if (!fortsVisited_.present ())
        {
          this->fortsVisited_.set (fortsVisited_traits::create (i, f, this));
          continue;
        }
      }

      // witchDoctorHutsVisited
      //
      if (n.name () == "witchDoctorHutsVisited" && n.namespace_ ().empty ())
      {
        if (!witchDoctorHutsVisited_.present ())
        {
          this->witchDoctorHutsVisited_.set (witchDoctorHutsVisited_traits::create (i, f, this));
          continue;
        }
      }

      // mercenaryCampsVisited
      //
      if (n.name () == "mercenaryCampsVisited" && n.namespace_ ().empty ())
      {
        if (!mercenaryCampsVisited_.present ())
        {
          this->mercenaryCampsVisited_.set (mercenaryCampsVisited_traits::create (i, f, this));
          continue;
        }
      }

      // standingStonesVisited
      //
      if (n.name () == "standingStonesVisited" && n.namespace_ ().empty ())
      {
        if (!standingStonesVisited_.present ())
        {
          this->standingStonesVisited_.set (standingStonesVisited_traits::create (i, f, this));
          continue;
        }
      }

      // treesOfKnowledgeVisited
      //
      if (n.name () == "treesOfKnowledgeVisited" && n.namespace_ ().empty ())
      {
        if (!treesOfKnowledgeVisited_.present ())
        {
          this->treesOfKnowledgeVisited_.set (treesOfKnowledgeVisited_traits::create (i, f, this));
          continue;
        }
      }

      // xanadusVisited
      //
      if (n.name () == "xanadusVisited" && n.namespace_ ().empty ())
      {
        if (!xanadusVisited_.present ())
        {
          this->xanadusVisited_.set (xanadusVisited_traits::create (i, f, this));
          continue;
        }
      }

      // randomSeed
      //
      if (n.name () == "randomSeed" && n.namespace_ ().empty ())
      {
        if (!randomSeed_.present ())
        {
          this->randomSeed_.set (randomSeed_traits::create (i, f, this));
          continue;
        }
      }

      // wisdomLastOffered
      //
      if (n.name () == "wisdomLastOffered" && n.namespace_ ().empty ())
      {
        if (!wisdomLastOffered_.present ())
        {
          this->wisdomLastOffered_.set (wisdomLastOffered_traits::create (i, f, this));
          continue;
        }
      }

      // army
      //
      if (n.name () == "army" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< army_type > r (
          army_traits::create (i, f, this));

        if (!army_.present ())
        {
          this->army_.set (r);
          continue;
        }
      }

      // secondarySkill
      //
      if (n.name () == "secondarySkill" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< secondarySkill_type > r (
          secondarySkill_traits::create (i, f, this));

        this->secondarySkill_.push_back (r);
        continue;
      }

      // spell
      //
      if (n.name () == "spell" && n.namespace_ ().empty ())
      {
        this->spell_.push_back (spell_traits::create (i, f, this));
        continue;
      }

      // artifact
      //
      if (n.name () == "artifact" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< artifact_type > r (
          artifact_traits::create (i, f, this));

        this->artifact_.push_back (r);
        continue;
      }

      // flags
      //
      if (n.name () == "flags" && n.namespace_ ().empty ())
      {
        if (!flags_.present ())
        {
          this->flags_.set (flags_traits::create (i, f, this));
          continue;
        }
      }

      // isCaptain
      //
      if (n.name () == "isCaptain" && n.namespace_ ().empty ())
      {
        if (!isCaptain_.present ())
        {
          this->isCaptain_.set (isCaptain_traits::create (i, f, this));
          continue;
        }
      }

      // field_E8
      //
      if (n.name () == "field_E8" && n.namespace_ ().empty ())
      {
        if (!field_E8_.present ())
        {
          this->field_E8_.set (field_E8_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!spellpoints_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "spellpoints",
        "");
    }

    if (!idx_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "idx",
        "");
    }

    if (!ownerIdx_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ownerIdx",
        "");
    }

    if (!field_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_4",
        "");
    }

    if (!field_5_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_5",
        "");
    }

    if (!field_6_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_6",
        "");
    }

    if (!field_7_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_7",
        "");
    }

    if (!field_8_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_8",
        "");
    }

    if (!field_9_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_9",
        "");
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "");
    }

    if (!factionID_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "factionID",
        "");
    }

    if (!heroID_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "heroID",
        "");
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "");
    }

    if (!field_21_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_21",
        "");
    }

    if (!field_23_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_23",
        "");
    }

    if (!field_25_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_25",
        "");
    }

    if (!field_27_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_27",
        "");
    }

    if (!field_29_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_29",
        "");
    }

    if (!field_2B_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_2B",
        "");
    }

    if (!occupiedObjType_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "occupiedObjType",
        "");
    }

    if (!occupiedObjVal_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "occupiedObjVal",
        "");
    }

    if (!mobility_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mobility",
        "");
    }

    if (!remainingMobility_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "remainingMobility",
        "");
    }

    if (!experience_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "experience",
        "");
    }

    if (!oldLevel_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "oldLevel",
        "");
    }

    if (!attack_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "attack",
        "");
    }

    if (!defense_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "defense",
        "");
    }

    if (!spellpower_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "spellpower",
        "");
    }

    if (!knowledge_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "knowledge",
        "");
    }

    if (!field_43_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_43",
        "");
    }

    if (!tempMoraleBonuses_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tempMoraleBonuses",
        "");
    }

    if (!tempLuckBonuses_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tempLuckBonuses",
        "");
    }

    if (!field_46_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_46",
        "");
    }

    if (!gazeboesVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "gazeboesVisited",
        "");
    }

    if (!fortsVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "fortsVisited",
        "");
    }

    if (!witchDoctorHutsVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "witchDoctorHutsVisited",
        "");
    }

    if (!mercenaryCampsVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mercenaryCampsVisited",
        "");
    }

    if (!standingStonesVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "standingStonesVisited",
        "");
    }

    if (!treesOfKnowledgeVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "treesOfKnowledgeVisited",
        "");
    }

    if (!xanadusVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "xanadusVisited",
        "");
    }

    if (!randomSeed_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "randomSeed",
        "");
    }

    if (!wisdomLastOffered_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "wisdomLastOffered",
        "");
    }

    if (!army_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "army",
        "ironfist_map");
    }

    if (!flags_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "flags",
        "");
    }

    if (!isCaptain_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "isCaptain",
        "");
    }

    if (!field_E8_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_E8",
        "");
    }
  }

  hero_t* hero_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class hero_t (*this, f, c);
  }

  hero_t::
  ~hero_t ()
  {
  }

  // tableElement_t
  //

  const tableElement_t::type_type tableElement_t::type_default_value_ (
    "string");

  tableElement_t::
  tableElement_t ()
  : ::xml_schema::type (),
    key_ (::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this),
    type_ (type_default_value (), ::xml_schema::flags (), this)
  {
  }

  tableElement_t::
  tableElement_t (const tableElement_t& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    key_ (x.key_, f, this),
    value_ (x.value_, f, this),
    type_ (x.type_, f, this)
  {
  }

  tableElement_t::
  tableElement_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    key_ (f, this),
    value_ (f, this),
    type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void tableElement_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "key" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< key_type > r (
          key_traits::create (i, f, this));

        this->key_.set (r);
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< value_type > r (
          value_traits::create (i, f, this));

        this->value_.set (r);
        continue;
      }

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.set (r);
        continue;
      }
    }

    if (!type_.present ())
    {
      this->type_.set (type_default_value ());
    }
  }

  tableElement_t* tableElement_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tableElement_t (*this, f, c);
  }

  tableElement_t::
  ~tableElement_t ()
  {
  }

  // table_t
  //

  table_t::
  table_t ()
  : ::xml_schema::type (),
    tableElement_ (::xml_schema::flags (), this),
    table_ (::xml_schema::flags (), this),
    tableId_ (::xml_schema::flags (), this)
  {
  }

  table_t::
  table_t (const table_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    tableElement_ (x.tableElement_, f, this),
    table_ (x.table_, f, this),
    tableId_ (x.tableId_, f, this)
  {
  }

  table_t::
  table_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    tableElement_ (f, this),
    table_ (f, this),
    tableId_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void table_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // tableElement
      //
      if (n.name () == "tableElement" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< tableElement_type > r (
          tableElement_traits::create (i, f, this));

        this->tableElement_.push_back (r);
        continue;
      }

      // table
      //
      if (n.name () == "table" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< table_type > r (
          table_traits::create (i, f, this));

        this->table_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "tableId" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< tableId_type > r (
          tableId_traits::create (i, f, this));

        this->tableId_.set (r);
        continue;
      }
    }
  }

  table_t* table_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class table_t (*this, f, c);
  }

  table_t::
  ~table_t ()
  {
  }

  // mapVariable_t
  //

  const mapVariable_t::type_type mapVariable_t::type_default_value_ (
    "string");

  mapVariable_t::
  mapVariable_t ()
  : ::xml_schema::type (),
    table_ (::xml_schema::flags (), this),
    id_ (::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this),
    type_ (type_default_value (), ::xml_schema::flags (), this)
  {
  }

  mapVariable_t::
  mapVariable_t (const mapVariable_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    table_ (x.table_, f, this),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this),
    type_ (x.type_, f, this)
  {
  }

  mapVariable_t::
  mapVariable_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    table_ (f, this),
    id_ (f, this),
    value_ (f, this),
    type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void mapVariable_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // table
      //
      if (n.name () == "table" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< table_type > r (
          table_traits::create (i, f, this));

        if (!this->table_)
        {
          this->table_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< value_type > r (
          value_traits::create (i, f, this));

        this->value_.set (r);
        continue;
      }

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.set (r);
        continue;
      }
    }

    if (!type_.present ())
    {
      this->type_.set (type_default_value ());
    }
  }

  mapVariable_t* mapVariable_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class mapVariable_t (*this, f, c);
  }

  mapVariable_t::
  ~mapVariable_t ()
  {
  }

  // gamestate_t
  //

  gamestate_t::
  gamestate_t (const allowAIArmySharing_type& allowAIArmySharing,
               const mapWidth_type& mapWidth,
               const mapHeight_type& mapHeight,
               const gameInstanceID_type& gameInstanceID,
               const monthType_type& monthType,
               const monthTypeExtra_type& monthTypeExtra,
               const weekType_type& weekType,
               const weekTypeExtra_type& weekTypeExtra,
               const mapChangeCtr_type& mapChangeCtr,
               const numPlayers_type& numPlayers,
               const currentPlayer_type& currentPlayer,
               const numDefatedPlayers_type& numDefatedPlayers,
               const day_type& day,
               const week_type& week,
               const month_type& month,
               const numObelisks_type& numObelisks,
               const field_6395_type& field_6395,
               const field_6396_type& field_6396,
               const field_6397_type& field_6397,
               const currentRumor_type& currentRumor,
               const numRumors_type& numRumors,
               const numEvents_type& numEvents,
               const field_657B_type& field_657B,
               const maxMapExtra_type& maxMapExtra,
               const field_44D_type& field_44D,
               const field_451_type& field_451,
               const difficulty_type& difficulty,
               const mapFilename_type& mapFilename)
  : ::xml_schema::type (),
    allowAIArmySharing_ (allowAIArmySharing, ::xml_schema::flags (), this),
    mapWidth_ (mapWidth, ::xml_schema::flags (), this),
    mapHeight_ (mapHeight, ::xml_schema::flags (), this),
    gameInstanceID_ (gameInstanceID, ::xml_schema::flags (), this),
    monthType_ (monthType, ::xml_schema::flags (), this),
    monthTypeExtra_ (monthTypeExtra, ::xml_schema::flags (), this),
    weekType_ (weekType, ::xml_schema::flags (), this),
    weekTypeExtra_ (weekTypeExtra, ::xml_schema::flags (), this),
    mapChangeCtr_ (mapChangeCtr, ::xml_schema::flags (), this),
    numPlayers_ (numPlayers, ::xml_schema::flags (), this),
    currentPlayer_ (currentPlayer, ::xml_schema::flags (), this),
    numDefatedPlayers_ (numDefatedPlayers, ::xml_schema::flags (), this),
    day_ (day, ::xml_schema::flags (), this),
    week_ (week, ::xml_schema::flags (), this),
    month_ (month, ::xml_schema::flags (), this),
    numObelisks_ (numObelisks, ::xml_schema::flags (), this),
    field_6395_ (field_6395, ::xml_schema::flags (), this),
    field_6396_ (field_6396, ::xml_schema::flags (), this),
    field_6397_ (field_6397, ::xml_schema::flags (), this),
    currentRumor_ (currentRumor, ::xml_schema::flags (), this),
    numRumors_ (numRumors, ::xml_schema::flags (), this),
    numEvents_ (numEvents, ::xml_schema::flags (), this),
    field_657B_ (field_657B, ::xml_schema::flags (), this),
    maxMapExtra_ (maxMapExtra, ::xml_schema::flags (), this),
    playerNames_ (::xml_schema::flags (), this),
    deadPlayers_ (::xml_schema::flags (), this),
    alivePlayers_ (::xml_schema::flags (), this),
    heroHireStatus_ (::xml_schema::flags (), this),
    field_44D_ (field_44D, ::xml_schema::flags (), this),
    field_451_ (field_451, ::xml_schema::flags (), this),
    playerHandicap_ (::xml_schema::flags (), this),
    field_459_ (::xml_schema::flags (), this),
    field_45F_ (::xml_schema::flags (), this),
    difficulty_ (difficulty, ::xml_schema::flags (), this),
    mapFilename_ (mapFilename, ::xml_schema::flags (), this),
    field_2773_ (::xml_schema::flags (), this),
    field_27BB_ (::xml_schema::flags (), this),
    field_60A6_ (::xml_schema::flags (), this),
    randomArtifacts_ (::xml_schema::flags (), this),
    boatBuilt_ (::xml_schema::flags (), this),
    obeliskVisitedMasks_ (::xml_schema::flags (), this),
    field_637D_ (::xml_schema::flags (), this),
    rumorIndices_ (::xml_schema::flags (), this),
    eventIndices_ (::xml_schema::flags (), this),
    _D_ (::xml_schema::flags (), this),
    mapRevealed_ (::xml_schema::flags (), this),
    mapExtra_ (::xml_schema::flags (), this)
  {
  }

  gamestate_t::
  gamestate_t (const gamestate_t& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    allowAIArmySharing_ (x.allowAIArmySharing_, f, this),
    mapWidth_ (x.mapWidth_, f, this),
    mapHeight_ (x.mapHeight_, f, this),
    gameInstanceID_ (x.gameInstanceID_, f, this),
    monthType_ (x.monthType_, f, this),
    monthTypeExtra_ (x.monthTypeExtra_, f, this),
    weekType_ (x.weekType_, f, this),
    weekTypeExtra_ (x.weekTypeExtra_, f, this),
    mapChangeCtr_ (x.mapChangeCtr_, f, this),
    numPlayers_ (x.numPlayers_, f, this),
    currentPlayer_ (x.currentPlayer_, f, this),
    numDefatedPlayers_ (x.numDefatedPlayers_, f, this),
    day_ (x.day_, f, this),
    week_ (x.week_, f, this),
    month_ (x.month_, f, this),
    numObelisks_ (x.numObelisks_, f, this),
    field_6395_ (x.field_6395_, f, this),
    field_6396_ (x.field_6396_, f, this),
    field_6397_ (x.field_6397_, f, this),
    currentRumor_ (x.currentRumor_, f, this),
    numRumors_ (x.numRumors_, f, this),
    numEvents_ (x.numEvents_, f, this),
    field_657B_ (x.field_657B_, f, this),
    maxMapExtra_ (x.maxMapExtra_, f, this),
    playerNames_ (x.playerNames_, f, this),
    deadPlayers_ (x.deadPlayers_, f, this),
    alivePlayers_ (x.alivePlayers_, f, this),
    heroHireStatus_ (x.heroHireStatus_, f, this),
    field_44D_ (x.field_44D_, f, this),
    field_451_ (x.field_451_, f, this),
    playerHandicap_ (x.playerHandicap_, f, this),
    field_459_ (x.field_459_, f, this),
    field_45F_ (x.field_45F_, f, this),
    difficulty_ (x.difficulty_, f, this),
    mapFilename_ (x.mapFilename_, f, this),
    field_2773_ (x.field_2773_, f, this),
    field_27BB_ (x.field_27BB_, f, this),
    field_60A6_ (x.field_60A6_, f, this),
    randomArtifacts_ (x.randomArtifacts_, f, this),
    boatBuilt_ (x.boatBuilt_, f, this),
    obeliskVisitedMasks_ (x.obeliskVisitedMasks_, f, this),
    field_637D_ (x.field_637D_, f, this),
    rumorIndices_ (x.rumorIndices_, f, this),
    eventIndices_ (x.eventIndices_, f, this),
    _D_ (x._D_, f, this),
    mapRevealed_ (x.mapRevealed_, f, this),
    mapExtra_ (x.mapExtra_, f, this)
  {
  }

  gamestate_t::
  gamestate_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    allowAIArmySharing_ (f, this),
    mapWidth_ (f, this),
    mapHeight_ (f, this),
    gameInstanceID_ (f, this),
    monthType_ (f, this),
    monthTypeExtra_ (f, this),
    weekType_ (f, this),
    weekTypeExtra_ (f, this),
    mapChangeCtr_ (f, this),
    numPlayers_ (f, this),
    currentPlayer_ (f, this),
    numDefatedPlayers_ (f, this),
    day_ (f, this),
    week_ (f, this),
    month_ (f, this),
    numObelisks_ (f, this),
    field_6395_ (f, this),
    field_6396_ (f, this),
    field_6397_ (f, this),
    currentRumor_ (f, this),
    numRumors_ (f, this),
    numEvents_ (f, this),
    field_657B_ (f, this),
    maxMapExtra_ (f, this),
    playerNames_ (f, this),
    deadPlayers_ (f, this),
    alivePlayers_ (f, this),
    heroHireStatus_ (f, this),
    field_44D_ (f, this),
    field_451_ (f, this),
    playerHandicap_ (f, this),
    field_459_ (f, this),
    field_45F_ (f, this),
    difficulty_ (f, this),
    mapFilename_ (f, this),
    field_2773_ (f, this),
    field_27BB_ (f, this),
    field_60A6_ (f, this),
    randomArtifacts_ (f, this),
    boatBuilt_ (f, this),
    obeliskVisitedMasks_ (f, this),
    field_637D_ (f, this),
    rumorIndices_ (f, this),
    eventIndices_ (f, this),
    _D_ (f, this),
    mapRevealed_ (f, this),
    mapExtra_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void gamestate_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // allowAIArmySharing
      //
      if (n.name () == "allowAIArmySharing" && n.namespace_ ().empty ())
      {
        if (!allowAIArmySharing_.present ())
        {
          this->allowAIArmySharing_.set (allowAIArmySharing_traits::create (i, f, this));
          continue;
        }
      }

      // mapWidth
      //
      if (n.name () == "mapWidth" && n.namespace_ ().empty ())
      {
        if (!mapWidth_.present ())
        {
          this->mapWidth_.set (mapWidth_traits::create (i, f, this));
          continue;
        }
      }

      // mapHeight
      //
      if (n.name () == "mapHeight" && n.namespace_ ().empty ())
      {
        if (!mapHeight_.present ())
        {
          this->mapHeight_.set (mapHeight_traits::create (i, f, this));
          continue;
        }
      }

      // gameInstanceID
      //
      if (n.name () == "gameInstanceID" && n.namespace_ ().empty ())
      {
        if (!gameInstanceID_.present ())
        {
          this->gameInstanceID_.set (gameInstanceID_traits::create (i, f, this));
          continue;
        }
      }

      // monthType
      //
      if (n.name () == "monthType" && n.namespace_ ().empty ())
      {
        if (!monthType_.present ())
        {
          this->monthType_.set (monthType_traits::create (i, f, this));
          continue;
        }
      }

      // monthTypeExtra
      //
      if (n.name () == "monthTypeExtra" && n.namespace_ ().empty ())
      {
        if (!monthTypeExtra_.present ())
        {
          this->monthTypeExtra_.set (monthTypeExtra_traits::create (i, f, this));
          continue;
        }
      }

      // weekType
      //
      if (n.name () == "weekType" && n.namespace_ ().empty ())
      {
        if (!weekType_.present ())
        {
          this->weekType_.set (weekType_traits::create (i, f, this));
          continue;
        }
      }

      // weekTypeExtra
      //
      if (n.name () == "weekTypeExtra" && n.namespace_ ().empty ())
      {
        if (!weekTypeExtra_.present ())
        {
          this->weekTypeExtra_.set (weekTypeExtra_traits::create (i, f, this));
          continue;
        }
      }

      // mapChangeCtr
      //
      if (n.name () == "mapChangeCtr" && n.namespace_ ().empty ())
      {
        if (!mapChangeCtr_.present ())
        {
          this->mapChangeCtr_.set (mapChangeCtr_traits::create (i, f, this));
          continue;
        }
      }

      // numPlayers
      //
      if (n.name () == "numPlayers" && n.namespace_ ().empty ())
      {
        if (!numPlayers_.present ())
        {
          this->numPlayers_.set (numPlayers_traits::create (i, f, this));
          continue;
        }
      }

      // currentPlayer
      //
      if (n.name () == "currentPlayer" && n.namespace_ ().empty ())
      {
        if (!currentPlayer_.present ())
        {
          this->currentPlayer_.set (currentPlayer_traits::create (i, f, this));
          continue;
        }
      }

      // numDefatedPlayers
      //
      if (n.name () == "numDefatedPlayers" && n.namespace_ ().empty ())
      {
        if (!numDefatedPlayers_.present ())
        {
          this->numDefatedPlayers_.set (numDefatedPlayers_traits::create (i, f, this));
          continue;
        }
      }

      // day
      //
      if (n.name () == "day" && n.namespace_ ().empty ())
      {
        if (!day_.present ())
        {
          this->day_.set (day_traits::create (i, f, this));
          continue;
        }
      }

      // week
      //
      if (n.name () == "week" && n.namespace_ ().empty ())
      {
        if (!week_.present ())
        {
          this->week_.set (week_traits::create (i, f, this));
          continue;
        }
      }

      // month
      //
      if (n.name () == "month" && n.namespace_ ().empty ())
      {
        if (!month_.present ())
        {
          this->month_.set (month_traits::create (i, f, this));
          continue;
        }
      }

      // numObelisks
      //
      if (n.name () == "numObelisks" && n.namespace_ ().empty ())
      {
        if (!numObelisks_.present ())
        {
          this->numObelisks_.set (numObelisks_traits::create (i, f, this));
          continue;
        }
      }

      // field_6395
      //
      if (n.name () == "field_6395" && n.namespace_ ().empty ())
      {
        if (!field_6395_.present ())
        {
          this->field_6395_.set (field_6395_traits::create (i, f, this));
          continue;
        }
      }

      // field_6396
      //
      if (n.name () == "field_6396" && n.namespace_ ().empty ())
      {
        if (!field_6396_.present ())
        {
          this->field_6396_.set (field_6396_traits::create (i, f, this));
          continue;
        }
      }

      // field_6397
      //
      if (n.name () == "field_6397" && n.namespace_ ().empty ())
      {
        if (!field_6397_.present ())
        {
          this->field_6397_.set (field_6397_traits::create (i, f, this));
          continue;
        }
      }

      // currentRumor
      //
      if (n.name () == "currentRumor" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< currentRumor_type > r (
          currentRumor_traits::create (i, f, this));

        if (!currentRumor_.present ())
        {
          this->currentRumor_.set (r);
          continue;
        }
      }

      // numRumors
      //
      if (n.name () == "numRumors" && n.namespace_ ().empty ())
      {
        if (!numRumors_.present ())
        {
          this->numRumors_.set (numRumors_traits::create (i, f, this));
          continue;
        }
      }

      // numEvents
      //
      if (n.name () == "numEvents" && n.namespace_ ().empty ())
      {
        if (!numEvents_.present ())
        {
          this->numEvents_.set (numEvents_traits::create (i, f, this));
          continue;
        }
      }

      // field_657B
      //
      if (n.name () == "field_657B" && n.namespace_ ().empty ())
      {
        if (!field_657B_.present ())
        {
          this->field_657B_.set (field_657B_traits::create (i, f, this));
          continue;
        }
      }

      // maxMapExtra
      //
      if (n.name () == "maxMapExtra" && n.namespace_ ().empty ())
      {
        if (!maxMapExtra_.present ())
        {
          this->maxMapExtra_.set (maxMapExtra_traits::create (i, f, this));
          continue;
        }
      }

      // playerNames
      //
      if (n.name () == "playerNames" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< playerNames_type > r (
          playerNames_traits::create (i, f, this));

        this->playerNames_.push_back (r);
        continue;
      }

      // deadPlayers
      //
      if (n.name () == "deadPlayers" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< deadPlayers_type > r (
          deadPlayers_traits::create (i, f, this));

        this->deadPlayers_.push_back (r);
        continue;
      }

      // alivePlayers
      //
      if (n.name () == "alivePlayers" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< alivePlayers_type > r (
          alivePlayers_traits::create (i, f, this));

        this->alivePlayers_.push_back (r);
        continue;
      }

      // heroHireStatus
      //
      if (n.name () == "heroHireStatus" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< heroHireStatus_type > r (
          heroHireStatus_traits::create (i, f, this));

        this->heroHireStatus_.push_back (r);
        continue;
      }

      // field_44D
      //
      if (n.name () == "field_44D" && n.namespace_ ().empty ())
      {
        if (!field_44D_.present ())
        {
          this->field_44D_.set (field_44D_traits::create (i, f, this));
          continue;
        }
      }

      // field_451
      //
      if (n.name () == "field_451" && n.namespace_ ().empty ())
      {
        if (!field_451_.present ())
        {
          this->field_451_.set (field_451_traits::create (i, f, this));
          continue;
        }
      }

      // playerHandicap
      //
      if (n.name () == "playerHandicap" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< playerHandicap_type > r (
          playerHandicap_traits::create (i, f, this));

        this->playerHandicap_.push_back (r);
        continue;
      }

      // field_459
      //
      if (n.name () == "field_459" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< field_459_type > r (
          field_459_traits::create (i, f, this));

        this->field_459_.push_back (r);
        continue;
      }

      // field_45F
      //
      if (n.name () == "field_45F" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< field_45F_type > r (
          field_45F_traits::create (i, f, this));

        this->field_45F_.push_back (r);
        continue;
      }

      // difficulty
      //
      if (n.name () == "difficulty" && n.namespace_ ().empty ())
      {
        if (!difficulty_.present ())
        {
          this->difficulty_.set (difficulty_traits::create (i, f, this));
          continue;
        }
      }

      // mapFilename
      //
      if (n.name () == "mapFilename" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< mapFilename_type > r (
          mapFilename_traits::create (i, f, this));

        if (!mapFilename_.present ())
        {
          this->mapFilename_.set (r);
          continue;
        }
      }

      // field_2773
      //
      if (n.name () == "field_2773" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< field_2773_type > r (
          field_2773_traits::create (i, f, this));

        this->field_2773_.push_back (r);
        continue;
      }

      // field_27BB
      //
      if (n.name () == "field_27BB" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< field_27BB_type > r (
          field_27BB_traits::create (i, f, this));

        this->field_27BB_.push_back (r);
        continue;
      }

      // field_60A6
      //
      if (n.name () == "field_60A6" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< field_60A6_type > r (
          field_60A6_traits::create (i, f, this));

        this->field_60A6_.push_back (r);
        continue;
      }

      // randomArtifacts
      //
      if (n.name () == "randomArtifacts" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< randomArtifacts_type > r (
          randomArtifacts_traits::create (i, f, this));

        this->randomArtifacts_.push_back (r);
        continue;
      }

      // boatBuilt
      //
      if (n.name () == "boatBuilt" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< boatBuilt_type > r (
          boatBuilt_traits::create (i, f, this));

        this->boatBuilt_.push_back (r);
        continue;
      }

      // obeliskVisitedMasks
      //
      if (n.name () == "obeliskVisitedMasks" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< obeliskVisitedMasks_type > r (
          obeliskVisitedMasks_traits::create (i, f, this));

        this->obeliskVisitedMasks_.push_back (r);
        continue;
      }

      // field_637D
      //
      if (n.name () == "field_637D" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< field_637D_type > r (
          field_637D_traits::create (i, f, this));

        this->field_637D_.push_back (r);
        continue;
      }

      // rumorIndices
      //
      if (n.name () == "rumorIndices" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< rumorIndices_type > r (
          rumorIndices_traits::create (i, f, this));

        this->rumorIndices_.push_back (r);
        continue;
      }

      // eventIndices
      //
      if (n.name () == "eventIndices" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< eventIndices_type > r (
          eventIndices_traits::create (i, f, this));

        this->eventIndices_.push_back (r);
        continue;
      }

      // _D
      //
      if (n.name () == "_D" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< _D_type > r (
          _D_traits::create (i, f, this));

        this->_D_.push_back (r);
        continue;
      }

      // mapRevealed
      //
      if (n.name () == "mapRevealed" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< mapRevealed_type > r (
          mapRevealed_traits::create (i, f, this));

        this->mapRevealed_.push_back (r);
        continue;
      }

      // mapExtra
      //
      if (n.name () == "mapExtra" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< mapExtra_type > r (
          mapExtra_traits::create (i, f, this));

        this->mapExtra_.push_back (r);
        continue;
      }

      break;
    }

    if (!allowAIArmySharing_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "allowAIArmySharing",
        "");
    }

    if (!mapWidth_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mapWidth",
        "");
    }

    if (!mapHeight_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mapHeight",
        "");
    }

    if (!gameInstanceID_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "gameInstanceID",
        "");
    }

    if (!monthType_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "monthType",
        "");
    }

    if (!monthTypeExtra_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "monthTypeExtra",
        "");
    }

    if (!weekType_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "weekType",
        "");
    }

    if (!weekTypeExtra_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "weekTypeExtra",
        "");
    }

    if (!mapChangeCtr_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mapChangeCtr",
        "");
    }

    if (!numPlayers_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "numPlayers",
        "");
    }

    if (!currentPlayer_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "currentPlayer",
        "");
    }

    if (!numDefatedPlayers_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "numDefatedPlayers",
        "");
    }

    if (!day_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "day",
        "");
    }

    if (!week_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "week",
        "");
    }

    if (!month_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "month",
        "");
    }

    if (!numObelisks_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "numObelisks",
        "");
    }

    if (!field_6395_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_6395",
        "");
    }

    if (!field_6396_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_6396",
        "");
    }

    if (!field_6397_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_6397",
        "");
    }

    if (!currentRumor_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "currentRumor",
        "");
    }

    if (!numRumors_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "numRumors",
        "");
    }

    if (!numEvents_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "numEvents",
        "");
    }

    if (!field_657B_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_657B",
        "");
    }

    if (!maxMapExtra_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "maxMapExtra",
        "");
    }

    if (!field_44D_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_44D",
        "");
    }

    if (!field_451_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_451",
        "");
    }

    if (!difficulty_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "difficulty",
        "");
    }

    if (!mapFilename_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mapFilename",
        "");
    }
  }

  gamestate_t* gamestate_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class gamestate_t (*this, f, c);
  }

  gamestate_t::
  ~gamestate_t ()
  {
  }

  // mapExtra_t
  //

  mapExtra_t::
  mapExtra_t ()
  : ::xml_schema::type (),
    ppMapExtra_ (::xml_schema::flags (), this)
  {
  }

  mapExtra_t::
  mapExtra_t (const mapExtra_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    ppMapExtra_ (x.ppMapExtra_, f, this)
  {
  }

  mapExtra_t::
  mapExtra_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    ppMapExtra_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void mapExtra_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ppMapExtra
      //
      if (n.name () == "ppMapExtra" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ppMapExtra_type > r (
          ppMapExtra_traits::create (i, f, this));

        this->ppMapExtra_.push_back (r);
        continue;
      }

      break;
    }
  }

  mapExtra_t* mapExtra_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class mapExtra_t (*this, f, c);
  }

  mapExtra_t::
  ~mapExtra_t ()
  {
  }

  // map_t
  //

  map_t::
  map_t (const raw_type& raw)
  : ::xml_schema::type (),
    gamestate_ (::xml_schema::flags (), this),
    hero_ (::xml_schema::flags (), this),
    mapVariable_ (::xml_schema::flags (), this),
    script_ (::xml_schema::flags (), this),
    raw_ (raw, ::xml_schema::flags (), this)
  {
  }

  map_t::
  map_t (const map_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    gamestate_ (x.gamestate_, f, this),
    hero_ (x.hero_, f, this),
    mapVariable_ (x.mapVariable_, f, this),
    script_ (x.script_, f, this),
    raw_ (x.raw_, f, this)
  {
  }

  map_t::
  map_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    gamestate_ (f, this),
    hero_ (f, this),
    mapVariable_ (f, this),
    script_ (f, this),
    raw_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void map_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // gamestate
      //
      if (n.name () == "gamestate" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< gamestate_type > r (
          gamestate_traits::create (i, f, this));

        if (!this->gamestate_)
        {
          this->gamestate_.set (r);
          continue;
        }
      }

      // hero
      //
      if (n.name () == "hero" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< hero_type > r (
          hero_traits::create (i, f, this));

        this->hero_.push_back (r);
        continue;
      }

      // mapVariable
      //
      if (n.name () == "mapVariable" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< mapVariable_type > r (
          mapVariable_traits::create (i, f, this));

        this->mapVariable_.push_back (r);
        continue;
      }

      // script
      //
      if (n.name () == "script" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< script_type > r (
          script_traits::create (i, f, this));

        if (!this->script_)
        {
          this->script_.set (r);
          continue;
        }
      }

      // raw
      //
      if (n.name () == "raw" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< raw_type > r (
          raw_traits::create (i, f, this));

        if (!raw_.present ())
        {
          this->raw_.set (r);
          continue;
        }
      }

      break;
    }

    if (!raw_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "raw",
        "ironfist_map");
    }
  }

  map_t* map_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class map_t (*this, f, c);
  }

  map_t::
  ~map_t ()
  {
  }

  // secondarySkill
  //

  secondarySkill::
  secondarySkill ()
  : ::xml_schema::type (),
    id_ (::xml_schema::flags (), this),
    level_ (::xml_schema::flags (), this),
    idx_ (::xml_schema::flags (), this)
  {
  }

  secondarySkill::
  secondarySkill (const secondarySkill& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    level_ (x.level_, f, this),
    idx_ (x.idx_, f, this)
  {
  }

  secondarySkill::
  secondarySkill (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    level_ (f, this),
    idx_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void secondarySkill::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "level" && n.namespace_ ().empty ())
      {
        this->level_.set (level_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "idx" && n.namespace_ ().empty ())
      {
        this->idx_.set (idx_traits::create (i, f, this));
        continue;
      }
    }
  }

  secondarySkill* secondarySkill::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class secondarySkill (*this, f, c);
  }

  secondarySkill::
  ~secondarySkill ()
  {
  }

  // artifact
  //

  artifact::
  artifact (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    spell_ (spell_default_value (), ::xml_schema::flags (), this)
  {
  }

  artifact::
  artifact (const artifact& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    spell_ (x.spell_, f, this)
  {
  }

  artifact::
  artifact (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    spell_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void artifact::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "spell" && n.namespace_ ().empty ())
      {
        this->spell_.set (spell_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!spell_.present ())
    {
      this->spell_.set (spell_default_value ());
    }
  }

  artifact* artifact::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class artifact (*this, f, c);
  }

  artifact::
  ~artifact ()
  {
  }

  // playerNames
  //

  playerNames::
  playerNames (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    name_ (::xml_schema::flags (), this)
  {
  }

  playerNames::
  playerNames (const playerNames& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    name_ (x.name_, f, this)
  {
  }

  playerNames::
  playerNames (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    name_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void playerNames::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name_.set (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  playerNames* playerNames::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class playerNames (*this, f, c);
  }

  playerNames::
  ~playerNames ()
  {
  }

  // deadPlayers
  //

  deadPlayers::
  deadPlayers (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    playerID_ (::xml_schema::flags (), this)
  {
  }

  deadPlayers::
  deadPlayers (const deadPlayers& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    playerID_ (x.playerID_, f, this)
  {
  }

  deadPlayers::
  deadPlayers (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    playerID_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void deadPlayers::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "playerID" && n.namespace_ ().empty ())
      {
        this->playerID_.set (playerID_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  deadPlayers* deadPlayers::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class deadPlayers (*this, f, c);
  }

  deadPlayers::
  ~deadPlayers ()
  {
  }

  // alivePlayers
  //

  alivePlayers::
  alivePlayers (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    playerID_ (::xml_schema::flags (), this)
  {
  }

  alivePlayers::
  alivePlayers (const alivePlayers& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    playerID_ (x.playerID_, f, this)
  {
  }

  alivePlayers::
  alivePlayers (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    playerID_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void alivePlayers::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "playerID" && n.namespace_ ().empty ())
      {
        this->playerID_.set (playerID_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  alivePlayers* alivePlayers::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class alivePlayers (*this, f, c);
  }

  alivePlayers::
  ~alivePlayers ()
  {
  }

  // heroHireStatus
  //

  heroHireStatus::
  heroHireStatus (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    status_ (::xml_schema::flags (), this)
  {
  }

  heroHireStatus::
  heroHireStatus (const heroHireStatus& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    status_ (x.status_, f, this)
  {
  }

  heroHireStatus::
  heroHireStatus (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    status_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void heroHireStatus::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "status" && n.namespace_ ().empty ())
      {
        this->status_.set (status_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  heroHireStatus* heroHireStatus::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class heroHireStatus (*this, f, c);
  }

  heroHireStatus::
  ~heroHireStatus ()
  {
  }

  // playerHandicap
  //

  playerHandicap::
  playerHandicap (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    handicap_ (::xml_schema::flags (), this)
  {
  }

  playerHandicap::
  playerHandicap (const playerHandicap& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    handicap_ (x.handicap_, f, this)
  {
  }

  playerHandicap::
  playerHandicap (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    handicap_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void playerHandicap::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "handicap" && n.namespace_ ().empty ())
      {
        this->handicap_.set (handicap_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  playerHandicap* playerHandicap::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class playerHandicap (*this, f, c);
  }

  playerHandicap::
  ~playerHandicap ()
  {
  }

  // field_459
  //

  field_459::
  field_459 (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  field_459::
  field_459 (const field_459& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  field_459::
  field_459 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void field_459::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  field_459* field_459::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class field_459 (*this, f, c);
  }

  field_459::
  ~field_459 ()
  {
  }

  // field_45F
  //

  field_45F::
  field_45F (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  field_45F::
  field_45F (const field_45F& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  field_45F::
  field_45F (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void field_45F::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  field_45F* field_45F::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class field_45F (*this, f, c);
  }

  field_45F::
  ~field_45F ()
  {
  }

  // field_2773
  //

  field_2773::
  field_2773 (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  field_2773::
  field_2773 (const field_2773& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  field_2773::
  field_2773 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void field_2773::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  field_2773* field_2773::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class field_2773 (*this, f, c);
  }

  field_2773::
  ~field_2773 ()
  {
  }

  // field_27BB
  //

  field_27BB::
  field_27BB (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  field_27BB::
  field_27BB (const field_27BB& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  field_27BB::
  field_27BB (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void field_27BB::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  field_27BB* field_27BB::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class field_27BB (*this, f, c);
  }

  field_27BB::
  ~field_27BB ()
  {
  }

  // field_60A6
  //

  field_60A6::
  field_60A6 (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  field_60A6::
  field_60A6 (const field_60A6& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  field_60A6::
  field_60A6 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void field_60A6::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  field_60A6* field_60A6::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class field_60A6 (*this, f, c);
  }

  field_60A6::
  ~field_60A6 ()
  {
  }

  // randomArtifacts
  //

  randomArtifacts::
  randomArtifacts (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    artifact_ (::xml_schema::flags (), this)
  {
  }

  randomArtifacts::
  randomArtifacts (const randomArtifacts& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    artifact_ (x.artifact_, f, this)
  {
  }

  randomArtifacts::
  randomArtifacts (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    artifact_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void randomArtifacts::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "artifact" && n.namespace_ ().empty ())
      {
        this->artifact_.set (artifact_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  randomArtifacts* randomArtifacts::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class randomArtifacts (*this, f, c);
  }

  randomArtifacts::
  ~randomArtifacts ()
  {
  }

  // boatBuilt
  //

  boatBuilt::
  boatBuilt (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    boat_ (::xml_schema::flags (), this)
  {
  }

  boatBuilt::
  boatBuilt (const boatBuilt& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    boat_ (x.boat_, f, this)
  {
  }

  boatBuilt::
  boatBuilt (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    boat_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void boatBuilt::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "boat" && n.namespace_ ().empty ())
      {
        this->boat_.set (boat_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  boatBuilt* boatBuilt::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class boatBuilt (*this, f, c);
  }

  boatBuilt::
  ~boatBuilt ()
  {
  }

  // obeliskVisitedMasks
  //

  obeliskVisitedMasks::
  obeliskVisitedMasks (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    obelisk_ (::xml_schema::flags (), this)
  {
  }

  obeliskVisitedMasks::
  obeliskVisitedMasks (const obeliskVisitedMasks& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    obelisk_ (x.obelisk_, f, this)
  {
  }

  obeliskVisitedMasks::
  obeliskVisitedMasks (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    obelisk_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void obeliskVisitedMasks::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "obelisk" && n.namespace_ ().empty ())
      {
        this->obelisk_.set (obelisk_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  obeliskVisitedMasks* obeliskVisitedMasks::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class obeliskVisitedMasks (*this, f, c);
  }

  obeliskVisitedMasks::
  ~obeliskVisitedMasks ()
  {
  }

  // field_637D
  //

  field_637D::
  field_637D (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  field_637D::
  field_637D (const field_637D& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  field_637D::
  field_637D (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void field_637D::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  field_637D* field_637D::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class field_637D (*this, f, c);
  }

  field_637D::
  ~field_637D ()
  {
  }

  // rumorIndices
  //

  rumorIndices::
  rumorIndices (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    index_ (::xml_schema::flags (), this)
  {
  }

  rumorIndices::
  rumorIndices (const rumorIndices& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    index_ (x.index_, f, this)
  {
  }

  rumorIndices::
  rumorIndices (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    index_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void rumorIndices::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "index" && n.namespace_ ().empty ())
      {
        this->index_.set (index_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  rumorIndices* rumorIndices::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class rumorIndices (*this, f, c);
  }

  rumorIndices::
  ~rumorIndices ()
  {
  }

  // eventIndices
  //

  eventIndices::
  eventIndices (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    index_ (::xml_schema::flags (), this)
  {
  }

  eventIndices::
  eventIndices (const eventIndices& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    index_ (x.index_, f, this)
  {
  }

  eventIndices::
  eventIndices (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    index_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void eventIndices::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "index" && n.namespace_ ().empty ())
      {
        this->index_.set (index_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  eventIndices* eventIndices::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class eventIndices (*this, f, c);
  }

  eventIndices::
  ~eventIndices ()
  {
  }

  // _D
  //

  _D::
  _D (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  _D::
  _D (const _D& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  _D::
  _D (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void _D::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  _D* _D::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class _D (*this, f, c);
  }

  _D::
  ~_D ()
  {
  }

  // mapRevealed
  //

  mapRevealed::
  mapRevealed (const id_type& id,
               const x_type& x,
               const y_type& y)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    revealed_ (::xml_schema::flags (), this)
  {
  }

  mapRevealed::
  mapRevealed (const mapRevealed& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    revealed_ (x.revealed_, f, this)
  {
  }

  mapRevealed::
  mapRevealed (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    x_ (f, this),
    y_ (f, this),
    revealed_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void mapRevealed::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "revealed" && n.namespace_ ().empty ())
      {
        this->revealed_.set (revealed_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "y",
        "");
    }
  }

  mapRevealed* mapRevealed::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class mapRevealed (*this, f, c);
  }

  mapRevealed::
  ~mapRevealed ()
  {
  }

  // ppMapExtra
  //

  ppMapExtra::
  ppMapExtra (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  ppMapExtra::
  ppMapExtra (const ppMapExtra& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  ppMapExtra::
  ppMapExtra (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void ppMapExtra::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (value_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  ppMapExtra* ppMapExtra::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ppMapExtra (*this, f, c);
  }

  ppMapExtra::
  ~ppMapExtra ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace ironfist_map
{
  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::map (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::map (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::map (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::map (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::map (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::map (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::map_t > r (
        ::ironfist_map::map (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "map" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::map_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::map_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "map",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "map" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::map_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::map_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "map",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
      ::ironfist_map::gamestate (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
      ::ironfist_map::gamestate (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
      ::ironfist_map::gamestate (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::gamestate (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::gamestate (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::gamestate (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::gamestate (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::gamestate (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::gamestate (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
      ::ironfist_map::gamestate (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
      ::ironfist_map::gamestate (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
      ::ironfist_map::gamestate (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
        ::ironfist_map::gamestate (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "gamestate" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::gamestate_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "gamestate",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::gamestate_t >
  gamestate (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "gamestate" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::gamestate_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::gamestate_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "gamestate",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::hero (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::hero (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::hero (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::hero (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::hero (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::hero (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::hero_t > r (
        ::ironfist_map::hero (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "hero" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::hero_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::hero_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "hero",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "hero" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::hero_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::hero_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "hero",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::mapVariable (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::mapVariable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::mapVariable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::mapVariable (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::mapVariable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::mapVariable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
        ::ironfist_map::mapVariable (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "mapVariable" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::mapVariable_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "mapVariable",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "mapVariable" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::mapVariable_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "mapVariable",
      "ironfist_map");
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::raw (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::raw (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::raw (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::raw (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::raw (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::raw (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::base64_binary > r (
        ::ironfist_map::raw (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "raw" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::xml_schema::base64_binary > r (
        ::xsd::cxx::tree::traits< ::xml_schema::base64_binary, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "raw",
      "ironfist_map");
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "raw" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::xml_schema::base64_binary > r (
        ::xsd::cxx::tree::traits< ::xml_schema::base64_binary, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "raw",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::army (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::army (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::army (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::army (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::army (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::army (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::army_t > r (
        ::ironfist_map::army (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "army" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::army_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::army_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "army",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "army" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::army_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::army_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "army",
      "ironfist_map");
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::script (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::script (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::script (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::script (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::script (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::script (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::ironfist_map::script (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "script" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "script",
      "ironfist_map");
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "script" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "script",
      "ironfist_map");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace ironfist_map
{
  void
  operator<< (::xercesc::DOMElement& e, const slot_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << *i.id ();
    }

    // quantity
    //
    if (i.quantity ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "quantity",
          e));

      a << *i.quantity ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const army_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // slot
    //
    for (army_t::slot_const_iterator
         b (i.slot ().begin ()), n (i.slot ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "slot",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const hero_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // spellpoints
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "spellpoints",
          e));

      s << i.spellpoints ();
    }

    // idx
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "idx",
          e));

      s << i.idx ();
    }

    // ownerIdx
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ownerIdx",
          e));

      s << i.ownerIdx ();
    }

    // field_4
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_4",
          e));

      s << i.field_4 ();
    }

    // field_5
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_5",
          e));

      s << i.field_5 ();
    }

    // field_6
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_6",
          e));

      s << i.field_6 ();
    }

    // field_7
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_7",
          e));

      s << i.field_7 ();
    }

    // field_8
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_8",
          e));

      s << i.field_8 ();
    }

    // field_9
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_9",
          e));

      s << i.field_9 ();
    }

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          e));

      s << i.name ();
    }

    // factionID
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "factionID",
          e));

      s << i.factionID ();
    }

    // heroID
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "heroID",
          e));

      s << i.heroID ();
    }

    // x
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "x",
          e));

      s << i.x ();
    }

    // y
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "y",
          e));

      s << i.y ();
    }

    // field_21
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_21",
          e));

      s << i.field_21 ();
    }

    // field_23
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_23",
          e));

      s << i.field_23 ();
    }

    // field_25
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_25",
          e));

      s << i.field_25 ();
    }

    // field_27
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_27",
          e));

      s << i.field_27 ();
    }

    // field_29
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_29",
          e));

      s << i.field_29 ();
    }

    // field_2B
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_2B",
          e));

      s << i.field_2B ();
    }

    // occupiedObjType
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "occupiedObjType",
          e));

      s << i.occupiedObjType ();
    }

    // occupiedObjVal
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "occupiedObjVal",
          e));

      s << i.occupiedObjVal ();
    }

    // mobility
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mobility",
          e));

      s << i.mobility ();
    }

    // remainingMobility
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "remainingMobility",
          e));

      s << i.remainingMobility ();
    }

    // experience
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "experience",
          e));

      s << i.experience ();
    }

    // oldLevel
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "oldLevel",
          e));

      s << i.oldLevel ();
    }

    // attack
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "attack",
          e));

      s << i.attack ();
    }

    // defense
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "defense",
          e));

      s << i.defense ();
    }

    // spellpower
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "spellpower",
          e));

      s << i.spellpower ();
    }

    // knowledge
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "knowledge",
          e));

      s << i.knowledge ();
    }

    // field_43
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_43",
          e));

      s << i.field_43 ();
    }

    // tempMoraleBonuses
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "tempMoraleBonuses",
          e));

      s << i.tempMoraleBonuses ();
    }

    // tempLuckBonuses
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "tempLuckBonuses",
          e));

      s << i.tempLuckBonuses ();
    }

    // field_46
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_46",
          e));

      s << i.field_46 ();
    }

    // gazeboesVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "gazeboesVisited",
          e));

      s << i.gazeboesVisited ();
    }

    // fortsVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "fortsVisited",
          e));

      s << i.fortsVisited ();
    }

    // witchDoctorHutsVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "witchDoctorHutsVisited",
          e));

      s << i.witchDoctorHutsVisited ();
    }

    // mercenaryCampsVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mercenaryCampsVisited",
          e));

      s << i.mercenaryCampsVisited ();
    }

    // standingStonesVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "standingStonesVisited",
          e));

      s << i.standingStonesVisited ();
    }

    // treesOfKnowledgeVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "treesOfKnowledgeVisited",
          e));

      s << i.treesOfKnowledgeVisited ();
    }

    // xanadusVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "xanadusVisited",
          e));

      s << i.xanadusVisited ();
    }

    // randomSeed
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "randomSeed",
          e));

      s << i.randomSeed ();
    }

    // wisdomLastOffered
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wisdomLastOffered",
          e));

      s << i.wisdomLastOffered ();
    }

    // army
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "army",
          "ironfist_map",
          e));

      s << i.army ();
    }

    // secondarySkill
    //
    for (hero_t::secondarySkill_const_iterator
         b (i.secondarySkill ().begin ()), n (i.secondarySkill ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "secondarySkill",
          e));

      s << *b;
    }

    // spell
    //
    for (hero_t::spell_const_iterator
         b (i.spell ().begin ()), n (i.spell ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "spell",
          e));

      s << *b;
    }

    // artifact
    //
    for (hero_t::artifact_const_iterator
         b (i.artifact ().begin ()), n (i.artifact ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "artifact",
          e));

      s << *b;
    }

    // flags
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "flags",
          e));

      s << i.flags ();
    }

    // isCaptain
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "isCaptain",
          e));

      s << i.isCaptain ();
    }

    // field_E8
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_E8",
          e));

      s << i.field_E8 ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const tableElement_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // key
    //
    if (i.key ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "key",
          e));

      a << *i.key ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }

    // type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "type",
          e));

      a << i.type ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const table_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // tableElement
    //
    for (table_t::tableElement_const_iterator
         b (i.tableElement ().begin ()), n (i.tableElement ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "tableElement",
          e));

      s << *b;
    }

    // table
    //
    for (table_t::table_const_iterator
         b (i.table ().begin ()), n (i.table ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "table",
          e));

      s << *b;
    }

    // tableId
    //
    if (i.tableId ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "tableId",
          e));

      a << *i.tableId ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const mapVariable_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // table
    //
    if (i.table ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "table",
          e));

      s << *i.table ();
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << *i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }

    // type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "type",
          e));

      a << i.type ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const gamestate_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // allowAIArmySharing
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "allowAIArmySharing",
          e));

      s << i.allowAIArmySharing ();
    }

    // mapWidth
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mapWidth",
          e));

      s << i.mapWidth ();
    }

    // mapHeight
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mapHeight",
          e));

      s << i.mapHeight ();
    }

    // gameInstanceID
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "gameInstanceID",
          e));

      s << i.gameInstanceID ();
    }

    // monthType
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "monthType",
          e));

      s << i.monthType ();
    }

    // monthTypeExtra
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "monthTypeExtra",
          e));

      s << i.monthTypeExtra ();
    }

    // weekType
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "weekType",
          e));

      s << i.weekType ();
    }

    // weekTypeExtra
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "weekTypeExtra",
          e));

      s << i.weekTypeExtra ();
    }

    // mapChangeCtr
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mapChangeCtr",
          e));

      s << i.mapChangeCtr ();
    }

    // numPlayers
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "numPlayers",
          e));

      s << i.numPlayers ();
    }

    // currentPlayer
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "currentPlayer",
          e));

      s << i.currentPlayer ();
    }

    // numDefatedPlayers
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "numDefatedPlayers",
          e));

      s << i.numDefatedPlayers ();
    }

    // day
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "day",
          e));

      s << i.day ();
    }

    // week
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "week",
          e));

      s << i.week ();
    }

    // month
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "month",
          e));

      s << i.month ();
    }

    // numObelisks
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "numObelisks",
          e));

      s << i.numObelisks ();
    }

    // field_6395
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_6395",
          e));

      s << i.field_6395 ();
    }

    // field_6396
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_6396",
          e));

      s << i.field_6396 ();
    }

    // field_6397
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_6397",
          e));

      s << i.field_6397 ();
    }

    // currentRumor
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "currentRumor",
          e));

      s << i.currentRumor ();
    }

    // numRumors
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "numRumors",
          e));

      s << i.numRumors ();
    }

    // numEvents
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "numEvents",
          e));

      s << i.numEvents ();
    }

    // field_657B
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_657B",
          e));

      s << i.field_657B ();
    }

    // maxMapExtra
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "maxMapExtra",
          e));

      s << i.maxMapExtra ();
    }

    // playerNames
    //
    for (gamestate_t::playerNames_const_iterator
         b (i.playerNames ().begin ()), n (i.playerNames ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "playerNames",
          e));

      s << *b;
    }

    // deadPlayers
    //
    for (gamestate_t::deadPlayers_const_iterator
         b (i.deadPlayers ().begin ()), n (i.deadPlayers ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "deadPlayers",
          e));

      s << *b;
    }

    // alivePlayers
    //
    for (gamestate_t::alivePlayers_const_iterator
         b (i.alivePlayers ().begin ()), n (i.alivePlayers ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "alivePlayers",
          e));

      s << *b;
    }

    // heroHireStatus
    //
    for (gamestate_t::heroHireStatus_const_iterator
         b (i.heroHireStatus ().begin ()), n (i.heroHireStatus ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "heroHireStatus",
          e));

      s << *b;
    }

    // field_44D
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_44D",
          e));

      s << i.field_44D ();
    }

    // field_451
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_451",
          e));

      s << i.field_451 ();
    }

    // playerHandicap
    //
    for (gamestate_t::playerHandicap_const_iterator
         b (i.playerHandicap ().begin ()), n (i.playerHandicap ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "playerHandicap",
          e));

      s << *b;
    }

    // field_459
    //
    for (gamestate_t::field_459_const_iterator
         b (i.field_459 ().begin ()), n (i.field_459 ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_459",
          e));

      s << *b;
    }

    // field_45F
    //
    for (gamestate_t::field_45F_const_iterator
         b (i.field_45F ().begin ()), n (i.field_45F ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_45F",
          e));

      s << *b;
    }

    // difficulty
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "difficulty",
          e));

      s << i.difficulty ();
    }

    // mapFilename
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mapFilename",
          e));

      s << i.mapFilename ();
    }

    // field_2773
    //
    for (gamestate_t::field_2773_const_iterator
         b (i.field_2773 ().begin ()), n (i.field_2773 ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_2773",
          e));

      s << *b;
    }

    // field_27BB
    //
    for (gamestate_t::field_27BB_const_iterator
         b (i.field_27BB ().begin ()), n (i.field_27BB ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_27BB",
          e));

      s << *b;
    }

    // field_60A6
    //
    for (gamestate_t::field_60A6_const_iterator
         b (i.field_60A6 ().begin ()), n (i.field_60A6 ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_60A6",
          e));

      s << *b;
    }

    // randomArtifacts
    //
    for (gamestate_t::randomArtifacts_const_iterator
         b (i.randomArtifacts ().begin ()), n (i.randomArtifacts ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "randomArtifacts",
          e));

      s << *b;
    }

    // boatBuilt
    //
    for (gamestate_t::boatBuilt_const_iterator
         b (i.boatBuilt ().begin ()), n (i.boatBuilt ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "boatBuilt",
          e));

      s << *b;
    }

    // obeliskVisitedMasks
    //
    for (gamestate_t::obeliskVisitedMasks_const_iterator
         b (i.obeliskVisitedMasks ().begin ()), n (i.obeliskVisitedMasks ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "obeliskVisitedMasks",
          e));

      s << *b;
    }

    // field_637D
    //
    for (gamestate_t::field_637D_const_iterator
         b (i.field_637D ().begin ()), n (i.field_637D ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_637D",
          e));

      s << *b;
    }

    // rumorIndices
    //
    for (gamestate_t::rumorIndices_const_iterator
         b (i.rumorIndices ().begin ()), n (i.rumorIndices ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "rumorIndices",
          e));

      s << *b;
    }

    // eventIndices
    //
    for (gamestate_t::eventIndices_const_iterator
         b (i.eventIndices ().begin ()), n (i.eventIndices ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "eventIndices",
          e));

      s << *b;
    }

    // _D
    //
    for (gamestate_t::_D_const_iterator
         b (i._D ().begin ()), n (i._D ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "_D",
          e));

      s << *b;
    }

    // mapRevealed
    //
    for (gamestate_t::mapRevealed_const_iterator
         b (i.mapRevealed ().begin ()), n (i.mapRevealed ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mapRevealed",
          e));

      s << *b;
    }

    // mapExtra
    //
    for (gamestate_t::mapExtra_const_iterator
         b (i.mapExtra ().begin ()), n (i.mapExtra ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mapExtra",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const mapExtra_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // ppMapExtra
    //
    for (mapExtra_t::ppMapExtra_const_iterator
         b (i.ppMapExtra ().begin ()), n (i.ppMapExtra ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ppMapExtra",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const map_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // gamestate
    //
    if (i.gamestate ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "gamestate",
          "ironfist_map",
          e));

      s << *i.gamestate ();
    }

    // hero
    //
    for (map_t::hero_const_iterator
         b (i.hero ().begin ()), n (i.hero ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hero",
          "ironfist_map",
          e));

      s << *b;
    }

    // mapVariable
    //
    for (map_t::mapVariable_const_iterator
         b (i.mapVariable ().begin ()), n (i.mapVariable ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mapVariable",
          "ironfist_map",
          e));

      s << *b;
    }

    // script
    //
    if (i.script ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "script",
          "ironfist_map",
          e));

      s << *i.script ();
    }

    // raw
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "raw",
          "ironfist_map",
          e));

      s << i.raw ();
    }
  }

  void
  map (::std::ostream& o,
       const ::ironfist_map::map_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  map (::std::ostream& o,
       const ::ironfist_map::map_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  map (::std::ostream& o,
       const ::ironfist_map::map_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  map (::xercesc::XMLFormatTarget& t,
       const ::ironfist_map::map_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  map (::xercesc::XMLFormatTarget& t,
       const ::ironfist_map::map_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  map (::xercesc::XMLFormatTarget& t,
       const ::ironfist_map::map_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  map (::xercesc::DOMDocument& d,
       const ::ironfist_map::map_t& s,
       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "map" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "map",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  map (const ::ironfist_map::map_t& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "map",
        "ironfist_map",
        m, f));

    ::ironfist_map::map (*d, s, f);
    return d;
  }

  void
  gamestate (::std::ostream& o,
             const ::ironfist_map::gamestate_t& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::gamestate (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  gamestate (::std::ostream& o,
             const ::ironfist_map::gamestate_t& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::gamestate (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  gamestate (::std::ostream& o,
             const ::ironfist_map::gamestate_t& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::gamestate (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  gamestate (::xercesc::XMLFormatTarget& t,
             const ::ironfist_map::gamestate_t& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::gamestate (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  gamestate (::xercesc::XMLFormatTarget& t,
             const ::ironfist_map::gamestate_t& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::gamestate (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  gamestate (::xercesc::XMLFormatTarget& t,
             const ::ironfist_map::gamestate_t& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::gamestate (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  gamestate (::xercesc::DOMDocument& d,
             const ::ironfist_map::gamestate_t& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "gamestate" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "gamestate",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  gamestate (const ::ironfist_map::gamestate_t& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "gamestate",
        "ironfist_map",
        m, f));

    ::ironfist_map::gamestate (*d, s, f);
    return d;
  }

  void
  hero (::std::ostream& o,
        const ::ironfist_map::hero_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  hero (::std::ostream& o,
        const ::ironfist_map::hero_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hero (::std::ostream& o,
        const ::ironfist_map::hero_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hero (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::hero_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  hero (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::hero_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hero (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::hero_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hero (::xercesc::DOMDocument& d,
        const ::ironfist_map::hero_t& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "hero" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "hero",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  hero (const ::ironfist_map::hero_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "hero",
        "ironfist_map",
        m, f));

    ::ironfist_map::hero (*d, s, f);
    return d;
  }

  void
  mapVariable (::std::ostream& o,
               const ::ironfist_map::mapVariable_t& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  mapVariable (::std::ostream& o,
               const ::ironfist_map::mapVariable_t& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mapVariable (::std::ostream& o,
               const ::ironfist_map::mapVariable_t& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mapVariable (::xercesc::XMLFormatTarget& t,
               const ::ironfist_map::mapVariable_t& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  mapVariable (::xercesc::XMLFormatTarget& t,
               const ::ironfist_map::mapVariable_t& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mapVariable (::xercesc::XMLFormatTarget& t,
               const ::ironfist_map::mapVariable_t& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mapVariable (::xercesc::DOMDocument& d,
               const ::ironfist_map::mapVariable_t& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "mapVariable" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "mapVariable",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  mapVariable (const ::ironfist_map::mapVariable_t& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "mapVariable",
        "ironfist_map",
        m, f));

    ::ironfist_map::mapVariable (*d, s, f);
    return d;
  }

  void
  raw (::std::ostream& o,
       const ::xml_schema::base64_binary& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  raw (::std::ostream& o,
       const ::xml_schema::base64_binary& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  raw (::std::ostream& o,
       const ::xml_schema::base64_binary& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  raw (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::base64_binary& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  raw (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::base64_binary& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  raw (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::base64_binary& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  raw (::xercesc::DOMDocument& d,
       const ::xml_schema::base64_binary& s,
       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "raw" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "raw",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  raw (const ::xml_schema::base64_binary& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "raw",
        "ironfist_map",
        m, f));

    ::ironfist_map::raw (*d, s, f);
    return d;
  }

  void
  army (::std::ostream& o,
        const ::ironfist_map::army_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  army (::std::ostream& o,
        const ::ironfist_map::army_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  army (::std::ostream& o,
        const ::ironfist_map::army_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  army (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::army_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  army (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::army_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  army (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::army_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  army (::xercesc::DOMDocument& d,
        const ::ironfist_map::army_t& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "army" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "army",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  army (const ::ironfist_map::army_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "army",
        "ironfist_map",
        m, f));

    ::ironfist_map::army (*d, s, f);
    return d;
  }

  void
  script (::std::ostream& o,
          const ::xml_schema::string& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  script (::std::ostream& o,
          const ::xml_schema::string& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  script (::std::ostream& o,
          const ::xml_schema::string& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  script (::xercesc::XMLFormatTarget& t,
          const ::xml_schema::string& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  script (::xercesc::XMLFormatTarget& t,
          const ::xml_schema::string& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  script (::xercesc::XMLFormatTarget& t,
          const ::xml_schema::string& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  script (::xercesc::DOMDocument& d,
          const ::xml_schema::string& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "script" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "script",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  script (const ::xml_schema::string& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "script",
        "ironfist_map",
        m, f));

    ::ironfist_map::script (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const secondarySkill& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << *i.id ();
    }

    // level
    //
    if (i.level ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "level",
          e));

      a << *i.level ();
    }

    // idx
    //
    if (i.idx ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "idx",
          e));

      a << *i.idx ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const artifact& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // spell
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "spell",
          e));

      a << i.spell ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const playerNames& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // name
    //
    if (i.name ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << *i.name ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const deadPlayers& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // playerID
    //
    if (i.playerID ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "playerID",
          e));

      a << *i.playerID ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const alivePlayers& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // playerID
    //
    if (i.playerID ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "playerID",
          e));

      a << *i.playerID ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const heroHireStatus& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // status
    //
    if (i.status ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "status",
          e));

      a << *i.status ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const playerHandicap& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // handicap
    //
    if (i.handicap ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "handicap",
          e));

      a << *i.handicap ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const field_459& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const field_45F& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const field_2773& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const field_27BB& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const field_60A6& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const randomArtifacts& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // artifact
    //
    if (i.artifact ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "artifact",
          e));

      a << *i.artifact ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const boatBuilt& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // boat
    //
    if (i.boat ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "boat",
          e));

      a << *i.boat ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const obeliskVisitedMasks& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // obelisk
    //
    if (i.obelisk ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "obelisk",
          e));

      a << *i.obelisk ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const field_637D& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const rumorIndices& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // index
    //
    if (i.index ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "index",
          e));

      a << *i.index ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const eventIndices& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // index
    //
    if (i.index ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "index",
          e));

      a << *i.index ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const _D& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const mapRevealed& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // x
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "x",
          e));

      a << i.x ();
    }

    // y
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "y",
          e));

      a << i.y ();
    }

    // revealed
    //
    if (i.revealed ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "revealed",
          e));

      a << *i.revealed ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ppMapExtra& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

