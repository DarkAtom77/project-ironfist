{
  int result; // eax@2
  int v3; // eax@7
  int v4; // eax@7
  int v5; // eax@7
  int v6; // eax@7
  int v7; // eax@7
  int v8; // eax@7
  int v9; // eax@7
  int v10; // eax@9
  int v11; // eax@10
  int v12; // eax@11
  int v13; // eax@12
  void *v14; // [sp+Ch] [bp-7Ch]@1
  int v15; // [sp+10h] [bp-78h]@5
  unsigned __int32 startmsec; // [sp+14h] [bp-74h]@9
  char v17; // [sp+18h] [bp-70h]@7
  unsigned __int32 tracknum; // [sp+7Ch] [bp-Ch]@7
  unsigned __int32 v19; // [sp+80h] [bp-8h]@3
  unsigned __int32 endmsec; // [sp+84h] [bp-4h]@9

  v14 = this;
  if ( dword_51D4A8 )
  {
    v19 = AIL_redbook_tracks(dword_51D4A8);
    if ( v19 )
    {
      v15 = open((const char *)v14, 17153);
      if ( v15 )
      {
        sprintf(&v17, "// FILE : %s\n", v14);
        v3 = strlen((int)&v17);
        _write(v15, &v17, v3);
        sprintf(&v17, "// DO NOT EDIT.\n");
        v4 = strlen((int)&v17);
        _write(v15, &v17, v4);
        sprintf(&v17, "// THIS FILE WAS AUTOMATICALLY GENERATED BY CDTest_GenerateTable.\n");
        v5 = strlen((int)&v17);
        _write(v15, &v17, v5);
        sprintf(&v17, "\n\n\n");
        v6 = strlen((int)&v17);
        _write(v15, &v17, v6);
        sprintf(&v17, "#define CDTEST_NUMTRACKS %d\n\n\n", v19);
        v7 = strlen((int)&v17);
        _write(v15, &v17, v7);
        sprintf(&v17, "sCDTest_Track_Data cdTestTrackData[CDTEST_NUMTRACKS] =\n");
        v8 = strlen((int)&v17);
        _write(v15, &v17, v8);
        sprintf(&v17, "{\n");
        v9 = strlen((int)&v17);
        _write(v15, &v17, v9);
        for ( tracknum = 1; (signed int)tracknum <= (signed int)v19; ++tracknum )
        {
          AIL_redbook_track_info(dword_51D4A8, tracknum, &startmsec, &endmsec);
          sprintf(&v17, "  {%d, %d}", startmsec, endmsec);
          v10 = strlen((int)&v17);
          _write(v15, &v17, v10);
          if ( tracknum != v19 )
          {
            sprintf(&v17, L",");
            v11 = strlen((int)&v17);
            _write(v15, &v17, v11);
          }
          sprintf(&v17, L"\n");
          v12 = strlen((int)&v17);
          _write(v15, &v17, v12);
        }
        sprintf(&v17, "};\n");
        v13 = strlen((int)&v17);
        _write(v15, &v17, v13);
        _close(v15);
        result = _unlink(a2);
      }
      else
      {
        result = _unlink(a2);
      }
    }
    else
    {
      result = _unlink(a2);
    }
  }
  else
  {
    result = _unlink(a2);
  }
  return result;
}